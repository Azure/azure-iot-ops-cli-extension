name: Integration tests
on:
  workflow_call:
    inputs:
      resource-group:
        description: Resource group for cluster creation
        type: string
        required: true
        default: ops-cli-int-test-rg
      runtime-init-args:
        description: Additional init arguments (beyond cluster name, resource group, key vault, and service principal arguments).
        type: string
        required: false
        default: ''
      custom-locations-oid:
        description: Custom Locations OID
        type: string
        required: false
        default: '51dfe1e8-70c6-4de5-a08e-e18aff23d815'
      use-container:
        description: Build container image for tests
        type: boolean
        required: false
        default: false
    secrets:
      # required for az login
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      # optional --sp-* init params
      AIO_SP_APP_ID:
      AIO_SP_OBJECT_ID:
      AIO_SP_SECRET:
  workflow_dispatch:
    inputs:
      resource-group:
        description: Resource group for cluster creation
        type: string
        required: true
        default: ops-cli-int-test-rg
      custom-locations-oid:
        description: Object ID of Custom Locations RP
        type: string
        required: false
        default: '51dfe1e8-70c6-4de5-a08e-e18aff23d815'
      runtime-init-args:
        description: Additional init arguments (beyond cluster name, resource group, key vault, and service principal arguments).
        type: string
        required: false
        default: ''
      init-continue-on-error:
        description: Continue on error for init integration tests
        type: boolean
        required: false
        default: true
      use-container:
        description: Build container image for tests
        type: boolean
        required: false
        default: false

permissions:
  # required for OpenID federation
  contents: 'read'
  id-token: 'write'

env:
  KV_NAME: "opskv${{ github.run_number }}x"
  RESOURCE_GROUP: "${{ inputs.resource-group }}"

jobs:
  create_kv:
    runs-on: ubuntu-22.04
    steps:
    - name: "Az CLI login"
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: "Create Key Vault for clusters"
      run: az keyvault create -n ${{ env.KV_NAME }} -g ${{ env.RESOURCE_GROUP }} --enable-rbac-authorization false --tags run_number=${{ github.run_number }}

  test:
    needs: [create_kv]
    outputs:
      CLUSTER_PREFIX: "iotopstest-${{ github.run_number }}"
      RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
      KV_NAME: ${{ env.KV_NAME }}
    env:
      CLUSTER_NAME: "opt${{ github.run_number }}${{ matrix.feature }}"
      CUSTOM_LOCATIONS_OID: ${{ inputs.custom-locations-oid }}
      EXTENSION_SOURCE_DIRECTORY: "./azure-iot-ops-cli-extension"
      K3S_VERSION: "v1.28.5+k3s1"
      CA_FILE: "test-ca.pem"
      CA_KEY_FILE: "test-ca-key.pem"
    strategy:
      fail-fast: false
      matrix:
        feature: [custom-input, default, insecure-listener, no-syncrules, ca-certs]
        runtime-args:
          - ${{ inputs.runtime-init-args != '' }}
        exclude:
          - feature: custom-input
            runtime-args: false
          - feature: default
            runtime-args: true
          - feature: insecure-listener
            runtime-args: true
          - feature: no-syncrules
            runtime-args: true
          - feature: ca-certs
            runtime-args: true
    name: "Run cluster tests"
    runs-on: ubuntu-22.04
    steps:
      - name: "Determine Init Args"
        id: "init"
        run: |
          echo "NO_PREFLIGHT=false" >> $GITHUB_OUTPUT
          if [[ ${{ matrix.feature }} == "default" ]]; then
            echo "ARG=--ca-valid-days 3 --kv-spc-secret-name test-kv-secret --simulate-plc" >> $GITHUB_OUTPUT
          elif [[ ${{ matrix.feature }} == "insecure-listener" ]]; then
            echo "ARG=--add-insecure-listener --broker-service-type LoadBalancer --csi-config telegraf.resources.limits.memory=500Mi telegraf.resources.limits.cpu=100m" >> $GITHUB_OUTPUT
            echo "NO_PREFLIGHT=true" >> $GITHUB_OUTPUT
          elif [[ ${{ matrix.feature }} == "no-syncrules" ]]; then
            echo "ARG=--disable-rsync-rules" >> $GITHUB_OUTPUT
          elif [[ ${{ matrix.feature }} == "ca-certs" ]]; then
            echo "ARG=--ca-file \"${{ env.CA_FILE }}\" --ca-key-file \"${{ env.CA_KEY_FILE }}\"" >> $GITHUB_OUTPUT
          else
            echo "ARG=${{ inputs.runtime-init-args }}" >> $GITHUB_OUTPUT
          fi
      - name: "Output variables for future steps"
        id: "env_out"
        run: |
          echo "RESOURCE_GROUP=${{ env.RESOURCE_GROUP }}" >> $GITHUB_OUTPUT
          echo "CLUSTER_NAME=${{ env.CLUSTER_NAME }}" >> $GITHUB_OUTPUT
      - name: "Setup python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: "Create k3s cluster"
        run: |
          # vars
          release_url="https://github.com/k3s-io/k3s/releases/download"
          install_dir="/usr/local/bin/k3s"

          # install
          sudo apt install nfs-common
          curl -Lo $install_dir "$release_url/${{ env.K3S_VERSION }}/k3s"
          chmod a+x $install_dir

          # config
          K3S_KUBECONFIG_MODE="644"

          # start cluster in background
          sudo k3s server --cluster-init &
      - name: "Copy config"
        run: |
          mkdir ~/.kube 2> /dev/null
          sudo k3s kubectl config view --raw > ~/.kube/config
          chmod 600 ~/.kube/config
      - name: "Checkout extension source for build"
        uses: actions/checkout@v4
        with:
          # ensure source checkout uses our repo instead of calling workflow
          repository: azure/azure-iot-ops-cli-extension
          path: ${{ env.EXTENSION_SOURCE_DIRECTORY }}
      - name: "Build and install local IoT Ops extension from source"
        run: |
          pip install wheel==0.30.0
          cd ${{ env.EXTENSION_SOURCE_DIRECTORY }}
          python -m setup bdist_wheel -d dist
          wheel=$(find ./dist/*.whl)
          az extension add --source $wheel -y
      - name: "Az CLI login"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: "ARC connect cluster"
        uses: azure/azure-iot-ops-cli-extension/.github/actions/connect-arc@dev
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.RESOURCE_GROUP }}
          custom-locations-oid: ${{ env.CUSTOM_LOCATIONS_OID }}
      - name: "Tox test environment setup for init"
        run: |
          cd ${{ env.EXTENSION_SOURCE_DIRECTORY }}
          python -m pip install tox
          tox r -vv -e python-init-int --notest
      - name: "Tox test environment setup for integration tests"
        if: ${{ matrix.feature == 'default' && !inputs.use-container }}
        run: |
          cd ${{ env.EXTENSION_SOURCE_DIRECTORY }}
          tox r -vv -e python-int --notest
      - name: "Create CA certificates"
        if: ${{ matrix.feature == 'ca-certs' }}
        run: |
          cd ${{ env.EXTENSION_SOURCE_DIRECTORY }}
          >ca.conf cat <<-EOF
          [ req ]
          distinguished_name = req_distinguished_name
          prompt = no
          x509_extensions = v3_ca

          [ req_distinguished_name ]
          CN=Azure IoT Operations CLI IT non-prod

          [ v3_ca ]
          basicConstraints = critical, CA:TRUE
          keyUsage = keyCertSign
          subjectKeyIdentifier = hash
          authorityKeyIdentifier = keyid
          EOF
          openssl ecparam -name prime256v1 -genkey -noout -out ${{ env.CA_KEY_FILE }}
          openssl req -new -x509 -key ${{ env.CA_KEY_FILE }} -days 30 -config ca.conf -out ${{ env.CA_FILE }}
          rm ca.conf
      - name: "Get Keyvault ID"
        id: "keyvault_id"
        run: |
          KV_ID=$(az keyvault show -n ${{ env.KV_NAME }} -g ${{ env.RESOURCE_GROUP }} -o tsv --query id)
          echo "KV_ID=$KV_ID" >> $GITHUB_OUTPUT
      - name: "Tox INIT Integration Tests"
        env:
          AIO_CLI_INIT_PREFLIGHT_DISABLED: ${{ steps.init.outputs.NO_PREFLIGHT }}
          azext_edge_init_continue_on_error: ${{ inputs.init-continue-on-error || '' }}
          azext_edge_rg: ${{ steps.env_out.outputs.RESOURCE_GROUP }}
          azext_edge_cluster: ${{ steps.env_out.outputs.CLUSTER_NAME }}
          azext_edge_kv: ${{ steps.keyvault_id.outputs.KV_ID }}
          azext_edge_init_args: ${{ steps.init.outputs.ARG }}
          azext_edge_sp_app_id: ${{ secrets.AIO_SP_APP_ID || '' }}
          azext_edge_sp_object_id: ${{ secrets.AIO_SP_OBJECT_ID || '' }}
          azext_edge_sp_secret: ${{ secrets.AIO_SP_SECRET || '' }}
        run: |
          cd ${{ env.EXTENSION_SOURCE_DIRECTORY }}
          tox r -e python-init-int --skip-pkg-install -- --durations=0
      - name: "Az CLI login refresh"
        if: ${{ matrix.feature == 'default' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: "OIDC Token exchange service"
        run: |
          while true; do
            token_request=$ACTIONS_ID_TOKEN_REQUEST_TOKEN
            token_uri=$ACTIONS_ID_TOKEN_REQUEST_URL
            token=$(curl -H "Authorization: bearer $token_request" "${token_uri}&audience=api://AzureADTokenExchange" | jq .value -r)
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -t ${{ secrets.AZURE_TENANT_ID }} --federated-token $token --output none
            # Sleep for 4 minutes
            sleep 240
          done &
      - name: "Tox Integration Tests"
        if: ${{ matrix.feature == 'default' && !inputs.use-container }}
        env:
          azext_edge_rg: ${{ steps.env_out.outputs.RESOURCE_GROUP }}
          azext_edge_cluster: ${{ steps.env_out.outputs.CLUSTER_NAME }}
        run: |
          cd ${{ env.EXTENSION_SOURCE_DIRECTORY }}
          tox r -e python-int --skip-pkg-install -- --durations=0
      - name: "Containerized tests"
        if: ${{ matrix.feature == 'default' && inputs.use-container }}
        env:
          azext_edge_rg: ${{ steps.env_out.outputs.CLUSTER_NAME }}
          azext_edge_cluster: ${{ steps.env_out.outputs.RESOURCE_GROUP }}
        run: |
          # volume mounts
          azure_dir=$(realpath ~/.azure)
          kubeconfig=$(realpath ~/.kube/config)
          kubeconfig_mount=/root/.kube/config
          tempLog=$(mktemp -d)

          # env vars
          envVars=()
          envVars+=("-e" "azext_edge_cluster=$azext_edge_rg")
          envVars+=("-e" "azext_edge_rg=$azext_edge_cluster")
          envVars+=("-e" "azext_edge_skip_init=$azext_edge_skip_init")
          envVars+=("-e" "KUBECONFIG=$kubeconfig_mount")

          # Run tests
          set +e
          docker run \
            --rm \
            "${envVars[@]}" \
            -v "$kubeconfig:$kubeconfig_mount:ro" \
            -v "${azure_dir}:/root/.azure" \
            -v "${tempLog}:/usr/src/azure-iot-ops/junit" \
            --network host \
            $(docker build ${{ env.EXTENSION_SOURCE_DIRECTORY }} -q)
      - name: "Az CLI login refresh"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: "Run smoke tests"
        run: |
          az iot ops support create-bundle --svc auto
          az iot ops support create-bundle --svc broker --broker-traces
          az iot ops check
          az iot ops check --pre
          az iot ops check --post
          az iot ops check --as-object
          az iot ops check --svc broker --resources broker brokerlistener
          az iot ops broker stats
          az iot ops broker stats --raw
          az iot ops asset query -g ${{ env.RESOURCE_GROUP }} --location westus -o table
          az iot ops verify-host
      - name: "Delete Cluster for redeployment"
        if: ${{ matrix.feature == 'ca-certs' }}
        run: |
          az iot ops delete --cluster ${{ env.CLUSTER_NAME }} -g ${{ env.RESOURCE_GROUP }} -y
      - name: "Redeploy cluster via tox"
        if: ${{ matrix.feature == 'ca-certs' }}
        env:
          azext_edge_rg: ${{ steps.env_out.outputs.RESOURCE_GROUP }}
          azext_edge_cluster: ${{ steps.env_out.outputs.CLUSTER_NAME }}
          azext_edge_kv: ${{ steps.keyvault_id.outputs.KV_ID }}
          azext_edge_init_args: ${{ steps.init.outputs.ARG }}
          azext_edge_sp_app_id: ${{ secrets.AIO_SP_APP_ID || '' }}
          azext_edge_sp_object_id: ${{ secrets.AIO_SP_OBJECT_ID || '' }}
          azext_edge_sp_secret: ${{ secrets.AIO_SP_SECRET || '' }}
        run: |
          cd ${{ env.EXTENSION_SOURCE_DIRECTORY }}
          tox r -e python-init-int --skip-pkg-install -- --durations=0
      - name: "Delete AIO resources"
        if: ${{ always() }}
        run: |
          az iot ops delete --cluster ${{ env.CLUSTER_NAME }} -g ${{ env.RESOURCE_GROUP }} -y
      - name: "Delete connected cluster"
        if: ${{ always() }}
        run: |
          az connectedk8s delete --name ${{ env.CLUSTER_NAME }} -g ${{ env.RESOURCE_GROUP }} -y

  delete_kv:
    if: ${{ always() }}
    needs: [test]
    runs-on: ubuntu-22.04
    steps:
    - name: "Az CLI login"
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: "Delete Key Vault for clusters"
      run: az keyvault delete -n ${{ env.KV_NAME }} -g ${{ env.RESOURCE_GROUP }} --no-wait
