# Copyright (c) Microsoft. All rights reserved.
# Licensed under the MIT license. See LICENSE file in the project root for full license information.

# This workflow assumes your cluster can be reached by the agent this workflow runs on.

name: 'Connect your cluster to Azure ARC'
description: |
  Action to connect your kubernetes cluster to Azure ARC using `az connectedk8s connect`.
  Will add the connectedk8s Azure CLI extension if not already installed.
inputs:
  cluster-name:
    required: true
    description: 'Cluster Name'
  resource-group:
    required: true
    description: 'Resource Group'
  config:
    description: Contents of kubeconfig to connect to cluster. If not provided, `~/.kube/config` will be used.
  custom-locations-oid:
    description: |
      Object ID of Custom Locations Application in your tenant.
      Find with: `az ad sp show --id bc313c14-388c-4e7d-a58e-70017303ee3b --query id -o tsv`.

      Please provide this value if your azure login context lacks permission to make this call.
  enable-workload-identity:
    description: Enable workload identity so secret sync can be applied.

runs:
  using: 'composite'
  steps:
    - name: "Install connectedk8s extension"
      run: az extension add -n connectedk8s -y
      shell: bash
    - name: "Write local kubeconfig"
      if: inputs.config
      env:
        config: |
          ${{ inputs.config }}
      run: |
        CONFIGPATH=$HOME/.kube/config
        mkdir -p $HOME/.kube
        echo "${{ env.config }}" > $CONFIGPATH
        chmod 644 $CONFIGPATH
        echo "ARC_CLUSTER_CONFIG=$CONFIGPATH" >> $GITHUB_ENV
      shell: bash
    - name: "Connect cluster to ARC and enable features"
      env:
        cluster-name: "${{ inputs.cluster-name }}"
        resource-group: "${{ inputs.resource-group }}"
        custom-locations-oid: ${{ inputs.custom-locations-oid && format('--custom-locations-oid {0}', inputs.custom-locations-oid) || '' }}
      run: >-
        az connectedk8s connect
        -n ${{ env.cluster-name }}
        -g ${{ env.resource-group }}
        ${{ env.custom-locations-oid }}
        ${{ env.ARC_CLUSTER_CONFIG && format('--kube-config {0}', env.ARC_CLUSTER_CONFIG) || '' }}

        az connectedk8s enable-features --features custom-locations cluster-connect
        -n ${{ env.cluster-name }}
        -g ${{ env.resource-group }}
        ${{ env.custom-locations-oid }}
        ${{ env.ARC_CLUSTER_CONFIG && format('--kube-config {0}', env.ARC_CLUSTER_CONFIG) || '' }}
      shell: bash
    - name: "Update cluster to enable workload identity"
      if: inputs.enable-workload-identity
      env:
        cluster-name: "${{ inputs.cluster-name }}"
        resource-group: "${{ inputs.resource-group }}"
      run: >-
        az connectedk8s update
        -n ${{ env.cluster-name }}
        -g ${{ env.resource-group }}
        --enable-oidc-issuer --enable-workload-identity
      shell: bash
    - name: "Wait for cluster connected status"
      env:
        cluster-name: "${{ inputs.cluster-name }}"
        resource-group: "${{ inputs.resource-group }}"
      run: |
        retry_count=0
        max_retries=5
        sleep=5

        status=$(az connectedk8s show -n ${{ env.cluster-name }} -g ${{ env.resource-group }} --query "connectivityStatus" -o tsv)

        while [ "$status" != "Connected" ] && [ $retry_count -lt $max_retries ]; do
          echo "Cluster status is "$status", Retrying in $sleep seconds..."
          sleep $sleep
          status=$(az connectedk8s show -n ${{ env.cluster-name }} -g ${{ env.resource-group }} --query "connectivityStatus" -o tsv)
          retry_count=$((retry_count + 1))
        done
        if [ "$status" != "Connected" ]; then
          echo "Cluster connection failed after $max_retries attempts."
          exit 1
        fi
      shell: bash
    - name: "Update the cluster issuer's URL"
      if: inputs.enable-workload-identity
      env:
        cluster-name: "${{ inputs.cluster-name }}"
        resource-group: "${{ inputs.resource-group }}"
        # config
        K3S_KUBECONFIG_MODE: 644
      run: |
        account_issuer=$(az connectedk8s show -n ${{ env.cluster-name }} -g ${{ env.resource-group }} --query oidcIssuerProfile.issuerUrl --output tsv)

        # TODO: see if kill script is still needed
        # sudo sh /usr/local/bin/k3s-killall.sh
        sudo kill -9 $(pgrep k3s)
        sleep 60s

        sudo k3s server --cluster-init --kube-apiserver-arg service-account-issuer=$account_issuer --kube-apiserver-arg service-account-max-token-expiration=24h &

        sleep 15s
      shell: bash
    - name: "Check OpenID Configuration"
      if: inputs.enable-workload-identity
      run: |
        kubectl get --raw /.well-known/openid-configuration
      shell: bash