# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

# default tox environments to run
[tox]
skip_missing_interpreters = true
envlist =
    lint
    python

# base dependencies (basically dev_requirements)
[base]
distdir={toxworkdir}/build
deps =
    -r dev_requirements.txt
description =
    # py{x} determines python version for environment.
    #    A valid interpreter must be installed (and added to PATH)
    #    for each selected version, otherwise the run will be skipped
    # list all available tox environments with: `tox -av`
    python: Local Python
    py38: Python 3.8
    py39: Python 3.9
    py310: Python 3.10
    py311: Python 3.11

# tox-gh matrix (github action -> tox python environment)
[gh]
python =
    3.8 = lint, py38
    3.9 = py39
    3.10 = py310
    3.11 = py311

# lint - flake8 and pylint
[testenv:lint]
description = run linter
deps =
    {[base]deps}
    azure-cli
commands =
    flake8 azext_edge/ --statistics --config=setup.cfg
    pylint azext_edge/ --rcfile=.pylintrc

[testenv:py{thon,38,39,310,311}]
skip_install = True
description =
    {[base]description}
deps =
    # base deps
    {[base]deps}
    # azure-cli deps
    azure-cli
setenv =
    PYTHONPATH={envsitepackagesdir}/azure-cli-extensions/azure-iot-ops
commands =
    python --version
    # install to tox extension dir
    pip install -U --target {envsitepackagesdir}/azure-cli-extensions/azure-iot-ops .
    # validate az and extension version
    az -v
    # run unit tests
    pytest -k _unit ./azext_edge/tests --cov=azext_edge/edge --cov-config .coveragerc --junitxml=junit/test-aziotops-ext-unit.xml {posargs}
    # You can pass additional positional args to pytest using `tox -e [env] -- -s -vv`

# init integration tests
[testenv:py{thon,38,39,310,311}-init-int]
skip_install = True
description =
    {[base]description}
    init: ops init
    int: integration tests
deps =
    # base deps
    {[testenv:python]deps}
passenv =
    # pass all env vars with this prefix to tox
    azext_edge_*
setenv =
    # You can temporarily add variables here to modify your tests
    # azext_edge_skip_init=true
    PYTHONPATH={envsitepackagesdir}/azure-cli-extensions/azure-iot-ops
commands =
    python --version
    # install to tox extension dir
    pip install -U --target {envsitepackagesdir}/azure-cli-extensions/azure-iot-ops .
    # validate az and extension version
    az -v
    # run integration tests

    pytest -k "_int.py" -m init_scenario_test ./azext_edge/tests/edge/init --cov=azext_edge/edge --cov-config .coveragerc --junitxml=junit/JUnit.xml {posargs}
    # You can pass additional positional args to pytest using `tox -e [env] -- -s -vv`

# integration tests
[testenv:py{thon,38,39,310,311}-int]
skip_install = True
description =
    {[base]description}
    int: integration tests
deps =
    # base deps
    {[testenv:python]deps}
passenv =
    # pass all env vars with this prefix to tox
    azext_edge_*
setenv =
    # You can temporarily add variables here to modify your tests
    # azext_edge_skip_init=true
    PYTHONPATH={envsitepackagesdir}/azure-cli-extensions/azure-iot-ops
commands =
    python --version
    # install to tox extension dir
    pip install -U --target {envsitepackagesdir}/azure-cli-extensions/azure-iot-ops .
    # validate az and extension version
    az -v
    # run integration tests
    pytest -vv -k "_int.py" -m "not init_scenario_test" ./azext_edge/tests --cov=azext_edge/edge --cov-config .coveragerc --junitxml=junit/JUnit.xml {posargs}
    # You can pass additional positional args to pytest using `tox -e [env] -- -s -vv`

# code coverage - HTML and JSON
[testenv:coverage]
description = run code coverage
deps =
    {[testenv:python]deps}
commands =
    pytest -k _unit --cov=azext_edge --cov-report=json --cov-report=html ./azext_edge/tests