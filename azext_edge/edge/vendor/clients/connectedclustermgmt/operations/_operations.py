# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Iterable, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .._serialization import Serializer
from .._vendor import _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_connected_cluster_create_or_update_request(
    resource_group_name: str, cluster_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-07-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_connected_cluster_update_request(
    resource_group_name: str, cluster_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-07-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_connected_cluster_get_request(
    resource_group_name: str, cluster_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-07-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_connected_cluster_delete_request(
    resource_group_name: str, cluster_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-07-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_connected_cluster_list_cluster_user_credential_request(
    resource_group_name: str, cluster_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-07-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters/{clusterName}/listClusterUserCredential"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_connected_cluster_list_by_resource_group_request(
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-07-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Kubernetes/connectedClusters"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_connected_cluster_list_by_subscription_request(subscription_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-07-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.Kubernetes/connectedClusters"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_operations_get_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-07-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.Kubernetes/operations"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class ConnectedClusterOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~connectedcluster.mgmt.ConnectedKubernetesClient`'s
        :attr:`connected_cluster` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    def _create_or_update_initial(
        self, resource_group_name: str, cluster_name: str, connected_cluster: Union[JSON, IO], **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(connected_cluster, (IOBase, bytes)):
            _content = connected_cluster
        else:
            _json = connected_cluster

        request = build_connected_cluster_create_or_update_request(
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def begin_create_or_update(
        self,
        resource_group_name: str,
        cluster_name: str,
        connected_cluster: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Register a new Kubernetes cluster with Azure Resource Manager.

        API to register a new Kubernetes cluster and create a tracked resource in Azure Resource
        Manager (ARM).

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :param connected_cluster: Parameters supplied to Create a Connected Cluster. Required.
        :type connected_cluster: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                connected_cluster = {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_create_or_update(
        self,
        resource_group_name: str,
        cluster_name: str,
        connected_cluster: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Register a new Kubernetes cluster with Azure Resource Manager.

        API to register a new Kubernetes cluster and create a tracked resource in Azure Resource
        Manager (ARM).

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :param connected_cluster: Parameters supplied to Create a Connected Cluster. Required.
        :type connected_cluster: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def begin_create_or_update(
        self, resource_group_name: str, cluster_name: str, connected_cluster: Union[JSON, IO], **kwargs: Any
    ) -> LROPoller[JSON]:
        """Register a new Kubernetes cluster with Azure Resource Manager.

        API to register a new Kubernetes cluster and create a tracked resource in Azure Resource
        Manager (ARM).

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :param connected_cluster: Parameters supplied to Create a Connected Cluster. Is either a JSON
         type or a IO type. Required.
        :type connected_cluster: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                connected_cluster = {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_or_update_initial(
                resource_group_name=resource_group_name,
                cluster_name=cluster_name,
                connected_cluster=connected_cluster,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @overload
    def update(
        self,
        resource_group_name: str,
        cluster_name: str,
        connected_cluster_patch: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Updates a connected cluster.

        API to update certain properties of the connected cluster resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :param connected_cluster_patch: Parameters supplied to update Connected Cluster. Required.
        :type connected_cluster_patch: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                connected_cluster_patch = {
                    "properties": {
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "distribution": "str",  # Optional. Represents the distribution of
                          the connected cluster.
                        "distributionVersion": "str"  # Optional. Represents the Kubernetes
                          distribution version on this connected cluster.
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def update(
        self,
        resource_group_name: str,
        cluster_name: str,
        connected_cluster_patch: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Updates a connected cluster.

        API to update certain properties of the connected cluster resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :param connected_cluster_patch: Parameters supplied to update Connected Cluster. Required.
        :type connected_cluster_patch: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def update(
        self, resource_group_name: str, cluster_name: str, connected_cluster_patch: Union[JSON, IO], **kwargs: Any
    ) -> JSON:
        """Updates a connected cluster.

        API to update certain properties of the connected cluster resource.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :param connected_cluster_patch: Parameters supplied to update Connected Cluster. Is either a
         JSON type or a IO type. Required.
        :type connected_cluster_patch: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                connected_cluster_patch = {
                    "properties": {
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "distribution": "str",  # Optional. Represents the distribution of
                          the connected cluster.
                        "distributionVersion": "str"  # Optional. Represents the Kubernetes
                          distribution version on this connected cluster.
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(connected_cluster_patch, (IOBase, bytes)):
            _content = connected_cluster_patch
        else:
            _json = connected_cluster_patch

        request = build_connected_cluster_update_request(
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get(self, resource_group_name: str, cluster_name: str, **kwargs: Any) -> JSON:
        """Get the properties of the specified connected cluster.

        Returns the properties of the specified connected cluster, including name, identity,
        properties, and additional cluster details.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_connected_cluster_get_request(
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    def _delete_initial(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, cluster_name: str, **kwargs: Any
    ) -> None:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_connected_cluster_delete_request(
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def begin_delete(self, resource_group_name: str, cluster_name: str, **kwargs: Any) -> LROPoller[None]:
        """Delete a connected cluster.

        Delete a connected cluster, removing the tracked resource in Azure Resource Manager (ARM).

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(  # type: ignore
                resource_group_name=resource_group_name,
                cluster_name=cluster_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "location"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @overload
    def list_cluster_user_credential(
        self,
        resource_group_name: str,
        cluster_name: str,
        properties: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Gets cluster user credentials of a connected cluster.

        Gets cluster user credentials of the connected cluster with a specified resource group and
        name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :param properties: ListClusterUserCredential properties. Required.
        :type properties: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "authenticationMethod": "str",  # The mode of client authentication.
                      Required. Known values are: "Token" and "AAD".
                    "clientProxy": bool  # Boolean value to indicate whether the request is for
                      client side proxy or not. Required.
                }

                # response body for status code(s): 200
                response == {
                    "hybridConnectionConfig": {
                        "expirationTime": 0,  # Optional. Timestamp when this token will be
                          expired.
                        "hybridConnectionName": "str",  # Optional. Name of the connection.
                        "relay": "str",  # Optional. Name of the relay.
                        "relayTid": "str",  # Optional. TenantID of the relay.
                        "relayType": "str",  # Optional. Type of relay.
                        "token": "str"  # Optional. Sender access token.
                    },
                    "kubeconfigs": [
                        {
                            "name": "str",  # Optional. The name of the credential.
                            "value": bytes("bytes", encoding="utf-8")  # Optional.
                              Base64-encoded Kubernetes configuration file.
                        }
                    ]
                }
        """

    @overload
    def list_cluster_user_credential(
        self,
        resource_group_name: str,
        cluster_name: str,
        properties: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Gets cluster user credentials of a connected cluster.

        Gets cluster user credentials of the connected cluster with a specified resource group and
        name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :param properties: ListClusterUserCredential properties. Required.
        :type properties: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "hybridConnectionConfig": {
                        "expirationTime": 0,  # Optional. Timestamp when this token will be
                          expired.
                        "hybridConnectionName": "str",  # Optional. Name of the connection.
                        "relay": "str",  # Optional. Name of the relay.
                        "relayTid": "str",  # Optional. TenantID of the relay.
                        "relayType": "str",  # Optional. Type of relay.
                        "token": "str"  # Optional. Sender access token.
                    },
                    "kubeconfigs": [
                        {
                            "name": "str",  # Optional. The name of the credential.
                            "value": bytes("bytes", encoding="utf-8")  # Optional.
                              Base64-encoded Kubernetes configuration file.
                        }
                    ]
                }
        """

    @distributed_trace
    def list_cluster_user_credential(
        self, resource_group_name: str, cluster_name: str, properties: Union[JSON, IO], **kwargs: Any
    ) -> JSON:
        """Gets cluster user credentials of a connected cluster.

        Gets cluster user credentials of the connected cluster with a specified resource group and
        name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_name: The name of the Kubernetes cluster on which get is called. Required.
        :type cluster_name: str
        :param properties: ListClusterUserCredential properties. Is either a JSON type or a IO type.
         Required.
        :type properties: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "authenticationMethod": "str",  # The mode of client authentication.
                      Required. Known values are: "Token" and "AAD".
                    "clientProxy": bool  # Boolean value to indicate whether the request is for
                      client side proxy or not. Required.
                }

                # response body for status code(s): 200
                response == {
                    "hybridConnectionConfig": {
                        "expirationTime": 0,  # Optional. Timestamp when this token will be
                          expired.
                        "hybridConnectionName": "str",  # Optional. Name of the connection.
                        "relay": "str",  # Optional. Name of the relay.
                        "relayTid": "str",  # Optional. TenantID of the relay.
                        "relayType": "str",  # Optional. Type of relay.
                        "token": "str"  # Optional. Sender access token.
                    },
                    "kubeconfigs": [
                        {
                            "name": "str",  # Optional. The name of the credential.
                            "value": bytes("bytes", encoding="utf-8")  # Optional.
                              Base64-encoded Kubernetes configuration file.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(properties, (IOBase, bytes)):
            _content = properties
        else:
            _json = properties

        request = build_connected_cluster_list_cluster_user_credential_request(
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> Iterable[JSON]:
        """Lists all connected clusters in the given ResourceGroup.

        API to enumerate registered connected K8s clusters under a Resource Group.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_connected_cluster_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> Iterable[JSON]:
        """Lists all connected clusters in the given Subscription.

        API to enumerate registered connected K8s clusters under a Subscription.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "identity": {
                        "type": "SystemAssigned",  # Default value is "SystemAssigned". The
                          type of identity used for the connected cluster. The type 'SystemAssigned,
                          includes a system created identity. The type 'None' means no identity is
                          assigned to the connected cluster. Known values are: "None" and
                          "SystemAssigned".
                        "principalId": "str",  # Optional. The principal id of connected
                          cluster identity. This property will only be provided for a system assigned
                          identity.
                        "tenantId": "str"  # Optional. The tenant id associated with the
                          connected cluster. This property will only be provided for a system assigned
                          identity.
                    },
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "properties": {
                        "agentPublicKeyCertificate": "str",  # Base64 encoded public
                          certificate used by the agent to do the initial handshake to the backend
                          services in Azure. Required.
                        "aadProfile": {
                            "adminGroupObjectIDs": [
                                "str"  # Optional. The list of AAD group object IDs
                                  that will have admin role of the cluster.
                            ],
                            "enableAzureRBAC": bool,  # Optional. Whether to enable Azure
                              RBAC for Kubernetes authorization.
                            "tenantID": "str"  # Optional. The AAD tenant ID to use for
                              authentication. If not specified, will use the tenant of the deployment
                              subscription.
                        },
                        "agentVersion": "str",  # Optional. Version of the agent running on
                          the connected cluster resource.
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "Enabled",  # Optional. Default value is
                              "Enabled". Indicates whether the Arc agents on the be upgraded
                              automatically to the latest version. Defaults to Enabled. Known values
                              are: "Enabled" and "Disabled".
                            "agentErrors": [
                                {
                                    "component": "str",  # Optional. Agent
                                      component where error message occured.
                                    "message": "str",  # Optional. Agent error
                                      message.
                                    "severity": "str",  # Optional. Severity of
                                      the error message.
                                    "time": "2020-02-20 00:00:00"  # Optional.
                                      The timestamp of error occured (UTC).
                                }
                            ],
                            "agentState": "str",  # Optional. Represents the current
                              state of the Arc agentry and its dependent components.
                            "desiredAgentVersion": "str",  # Optional. Version of the Arc
                              agents to be installed on the cluster resource.
                            "systemComponents": [
                                {
                                    "currentVersion": "str",  # Optional. Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "majorVersion": 0,  # Optional. Major Version
                                      of the system extension that is currently installed on the
                                      cluster resource.
                                    "type": "str",  # Optional. Type of the
                                      system extension.
                                    "userSpecifiedVersion": "str"  # Optional.
                                      Version of the system extension to be installed on the cluster
                                      resource.
                                }
                            ]
                        },
                        "arcAgentryConfigurations": [
                            {
                                "feature": "str",  # Optional. Specifies the name of
                                  the feature for the configuration setting.
                                "protectedSettings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that contain any sensitive or secret
                                      information.
                                },
                                "settings": {
                                    "str": "str"  # Optional. The configuration
                                      settings for the feature that do not contain any sensitive or
                                      secret information.
                                }
                            }
                        ],
                        "azureHybridBenefit": "str",  # Optional. Indicates whether Azure
                          Hybrid Benefit is opted in. Known values are: "True", "False", and
                          "NotApplicable".
                        "connectivityStatus": "str",  # Optional. Represents the connectivity
                          status of the connected cluster. Known values are: "Connecting", "Connected",
                          "Offline", and "Expired".
                        "distribution": "str",  # Optional. The Kubernetes distribution
                          running on this connected cluster.
                        "distributionVersion": "str",  # Optional. The Kubernetes
                          distribution version on this connected cluster.
                        "gateway": {
                            "enabled": bool,  # Optional. Indicates whether the gateway
                              for arc router connectivity is enabled.
                            "resourceId": "str"  # Optional. The resource ID of the
                              gateway used for the Arc router feature.
                        },
                        "infrastructure": "str",  # Optional. The infrastructure on which the
                          Kubernetes cluster represented by this connected cluster is running on.
                        "kubernetesVersion": "str",  # Optional. The Kubernetes version of
                          the connected cluster resource.
                        "lastConnectivityTime": "2020-02-20 00:00:00",  # Optional. Time
                          representing the last instance when heart beat was received from the cluster.
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",  #
                          Optional. Expiration time of the managed identity certificate.
                        "miscellaneousProperties": {
                            "str": "str"  # Optional. More properties related to the
                              Connected Cluster.
                        },
                        "offering": "str",  # Optional. Connected cluster offering.
                        "oidcIssuerProfile": {
                            "enabled": bool,  # Optional. Whether to enable oidc issuer
                              for workload identity integration.
                            "issuerUrl": "str",  # Optional. The issuer url for hybrid
                              clusters connected to Arc used for the workload identity feature.
                            "selfHostedIssuerUrl": "str"  # Optional. The issuer url for
                              public cloud clusters - AKS, EKS, GKE - used for the workload identity
                              feature.
                        },
                        "privateLinkScopeResourceId": "str",  # Optional. This is populated
                          only if privateLinkState is enabled. The resource id of the private link
                          scope this connected cluster is assigned to, if any.
                        "privateLinkState": "Disabled",  # Optional. Default value is
                          "Disabled". Property which describes the state of private link on a connected
                          cluster resource. Known values are: "Enabled" and "Disabled".
                        "provisioningState": "str",  # Optional. Provisioning state of the
                          connected cluster resource. Known values are: "Succeeded", "Failed",
                          "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
                        "securityProfile": {
                            "workloadIdentity": {
                                "enabled": bool  # Optional. Whether to enable or
                                  disable the workload identity Webhook.
                            }
                        },
                        "totalCoreCount": 0,  # Optional. Number of CPU cores present in the
                          connected cluster resource.
                        "totalNodeCount": 0  # Optional. Number of nodes present in the
                          connected cluster resource.
                    },
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "kind": "str",  # Optional. The kind of connected cluster.
                      "ProvisionedCluster"
                    "name": "str",  # Optional. The name of the resource.
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_connected_cluster_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class Operations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~connectedcluster.mgmt.ConnectedKubernetesClient`'s
        :attr:`operations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, **kwargs: Any) -> Iterable[JSON]:
        """Lists all of the available API operations for Connected Cluster resource.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "display": {
                        "description": "str",  # Optional. Description of the operation.
                        "operation": "str",  # Optional. Operation type: Read, write, delete,
                          etc.
                        "provider": "str",  # Optional. Service provider:
                          Microsoft.Kubernetes.
                        "resource": "str"  # Optional. Connected Cluster Resource on which
                          the operation is performed.
                    },
                    "name": "str"  # Optional. Operation name:
                      {Microsoft.Kubernetes}/{resource}/{operation}.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_operations_get_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)
