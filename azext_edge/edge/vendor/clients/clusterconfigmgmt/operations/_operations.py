# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Iterable, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .._serialization import Serializer
from .._vendor import _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_extensions_create_request(
    resource_group_name: str,
    cluster_rp: str,
    cluster_resource_name: str,
    cluster_name: str,
    extension_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-05-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterRp": _SERIALIZER.url("cluster_rp", cluster_rp, "str"),
        "clusterResourceName": _SERIALIZER.url("cluster_resource_name", cluster_resource_name, "str"),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
        "extensionName": _SERIALIZER.url("extension_name", extension_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_extensions_get_request(
    resource_group_name: str,
    cluster_rp: str,
    cluster_resource_name: str,
    cluster_name: str,
    extension_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-05-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterRp": _SERIALIZER.url("cluster_rp", cluster_rp, "str"),
        "clusterResourceName": _SERIALIZER.url("cluster_resource_name", cluster_resource_name, "str"),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
        "extensionName": _SERIALIZER.url("extension_name", extension_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_extensions_delete_request(
    resource_group_name: str,
    cluster_rp: str,
    cluster_resource_name: str,
    cluster_name: str,
    extension_name: str,
    subscription_id: str,
    *,
    force_delete: Optional[bool] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-05-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterRp": _SERIALIZER.url("cluster_rp", cluster_rp, "str"),
        "clusterResourceName": _SERIALIZER.url("cluster_resource_name", cluster_resource_name, "str"),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
        "extensionName": _SERIALIZER.url("extension_name", extension_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if force_delete is not None:
        _params["forceDelete"] = _SERIALIZER.query("force_delete", force_delete, "bool")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_extensions_update_request(
    resource_group_name: str,
    cluster_rp: str,
    cluster_resource_name: str,
    cluster_name: str,
    extension_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-05-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterRp": _SERIALIZER.url("cluster_rp", cluster_rp, "str"),
        "clusterResourceName": _SERIALIZER.url("cluster_resource_name", cluster_resource_name, "str"),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
        "extensionName": _SERIALIZER.url("extension_name", extension_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_extensions_list_request(
    resource_group_name: str,
    cluster_rp: str,
    cluster_resource_name: str,
    cluster_name: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-05-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterRp": _SERIALIZER.url("cluster_rp", cluster_rp, "str"),
        "clusterResourceName": _SERIALIZER.url("cluster_resource_name", cluster_resource_name, "str"),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_operation_status_get_request(
    resource_group_name: str,
    cluster_rp: str,
    cluster_resource_name: str,
    cluster_name: str,
    extension_name: str,
    operation_id: str,
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-05-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionName}/operations/{operationId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "clusterRp": _SERIALIZER.url("cluster_rp", cluster_rp, "str"),
        "clusterResourceName": _SERIALIZER.url("cluster_resource_name", cluster_resource_name, "str"),
        "clusterName": _SERIALIZER.url("cluster_name", cluster_name, "str"),
        "extensionName": _SERIALIZER.url("extension_name", extension_name, "str"),
        "operationId": _SERIALIZER.url("operation_id", operation_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class ExtensionsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~k8sconfig.mgmt.KubernetesConfigurationClient`'s
        :attr:`extensions` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    def _create_initial(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        extension: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(extension, (IOBase, bytes)):
            _content = extension
        else:
            _json = extension

        request = build_extensions_create_request(
            resource_group_name=resource_group_name,
            cluster_rp=cluster_rp,
            cluster_resource_name=cluster_resource_name,
            cluster_name=cluster_name,
            extension_name=extension_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        extension: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create a new Kubernetes Cluster Extension.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_rp: The Kubernetes cluster RP - i.e. Microsoft.ContainerService,
         Microsoft.Kubernetes, Microsoft.HybridContainerService. Required.
        :type cluster_rp: str
        :param cluster_resource_name: The Kubernetes cluster resource name - i.e. managedClusters,
         connectedClusters, provisionedClusters. Required.
        :type cluster_resource_name: str
        :param cluster_name: The name of the kubernetes cluster. Required.
        :type cluster_name: str
        :param extension_name: Name of the Extension. Required.
        :type extension_name: str
        :param extension: Properties necessary to Create an Extension. Required.
        :type extension: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                extension = {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "SystemAssigned"  # Optional. Default value is
                          "SystemAssigned". The identity type.
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "plan": {
                        "name": "str",  # A user defined name of the 3rd Party Artifact that
                          is being procured. Required.
                        "product": "str",  # The 3rd Party artifact that is being procured.
                          E.g. NewRelic. Product maps to the OfferID specified for the artifact at the
                          time of Data Market onboarding. Required.
                        "publisher": "str",  # The publisher of the 3rd Party Artifact that
                          is being bought. E.g. NewRelic. Required.
                        "promotionCode": "str",  # Optional. A publisher provided promotion
                          code as provisioned in Data Market for the said product/artifact.
                        "version": "str"  # Optional. The version of the desired
                          product/artifact.
                    },
                    "properties": {
                        "aksAssignedIdentity": {
                            "principalId": "str",  # Optional. The principal ID of
                              resource identity.
                            "tenantId": "str",  # Optional. The tenant ID of resource.
                            "type": "str"  # Optional. The identity type. Known values
                              are: "SystemAssigned" and "UserAssigned".
                        },
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "currentVersion": "str",  # Optional. Currently installed version of
                          the extension.
                        "customLocationSettings": {
                            "str": "str"  # Optional. Custom Location settings
                              properties.
                        },
                        "errorInfo": {
                            "additionalInfo": [
                                {
                                    "info": {},  # Optional. The additional info.
                                    "type": "str"  # Optional. The additional
                                      info type.
                                }
                            ],
                            "code": "str",  # Optional. The error code.
                            "details": [
                                ...
                            ],
                            "message": "str",  # Optional. The error message.
                            "target": "str"  # Optional. The error target.
                        },
                        "extensionType": "str",  # Optional. Type of the Extension, of which
                          this resource is an instance of.  It must be one of the Extension Types
                          registered with Microsoft.KubernetesConfiguration by the Extension publisher.
                        "isSystemExtension": False,  # Optional. Default value is False. Flag
                          to note if this extension is a system extension.
                        "packageUri": "str",  # Optional. Uri of the Helm package.
                        "provisioningState": "str",  # Optional. Status of installation of
                          this extension. Known values are: "Succeeded", "Failed", "Canceled",
                          "Creating", "Updating", and "Deleting".
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "scope": {
                            "cluster": {
                                "releaseNamespace": "str"  # Optional. Namespace
                                  where the extension Release must be placed, for a Cluster scoped
                                  extension.  If this namespace does not exist, it will be created.
                            },
                            "namespace": {
                                "targetNamespace": "str"  # Optional. Namespace where
                                  the extension will be created for an Namespace scoped extension.  If
                                  this namespace does not exist, it will be created.
                            }
                        },
                        "statuses": [
                            {
                                "code": "str",  # Optional. Status code provided by
                                  the Extension.
                                "displayStatus": "str",  # Optional. Short
                                  description of status of the extension.
                                "level": "Information",  # Optional. Default value is
                                  "Information". Level of the status. Known values are: "Error",
                                  "Warning", and "Information".
                                "message": "str",  # Optional. Detailed message of
                                  the status from the Extension.
                                "time": "str"  # Optional. DateLiteral (per ISO8601)
                                  noting the time of installation status.
                            }
                        ],
                        "version": "str"  # Optional. User-specified version of the extension
                          for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must
                          be 'false'.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "SystemAssigned"  # Optional. Default value is
                          "SystemAssigned". The identity type.
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "plan": {
                        "name": "str",  # A user defined name of the 3rd Party Artifact that
                          is being procured. Required.
                        "product": "str",  # The 3rd Party artifact that is being procured.
                          E.g. NewRelic. Product maps to the OfferID specified for the artifact at the
                          time of Data Market onboarding. Required.
                        "publisher": "str",  # The publisher of the 3rd Party Artifact that
                          is being bought. E.g. NewRelic. Required.
                        "promotionCode": "str",  # Optional. A publisher provided promotion
                          code as provisioned in Data Market for the said product/artifact.
                        "version": "str"  # Optional. The version of the desired
                          product/artifact.
                    },
                    "properties": {
                        "aksAssignedIdentity": {
                            "principalId": "str",  # Optional. The principal ID of
                              resource identity.
                            "tenantId": "str",  # Optional. The tenant ID of resource.
                            "type": "str"  # Optional. The identity type. Known values
                              are: "SystemAssigned" and "UserAssigned".
                        },
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "currentVersion": "str",  # Optional. Currently installed version of
                          the extension.
                        "customLocationSettings": {
                            "str": "str"  # Optional. Custom Location settings
                              properties.
                        },
                        "errorInfo": {
                            "additionalInfo": [
                                {
                                    "info": {},  # Optional. The additional info.
                                    "type": "str"  # Optional. The additional
                                      info type.
                                }
                            ],
                            "code": "str",  # Optional. The error code.
                            "details": [
                                ...
                            ],
                            "message": "str",  # Optional. The error message.
                            "target": "str"  # Optional. The error target.
                        },
                        "extensionType": "str",  # Optional. Type of the Extension, of which
                          this resource is an instance of.  It must be one of the Extension Types
                          registered with Microsoft.KubernetesConfiguration by the Extension publisher.
                        "isSystemExtension": False,  # Optional. Default value is False. Flag
                          to note if this extension is a system extension.
                        "packageUri": "str",  # Optional. Uri of the Helm package.
                        "provisioningState": "str",  # Optional. Status of installation of
                          this extension. Known values are: "Succeeded", "Failed", "Canceled",
                          "Creating", "Updating", and "Deleting".
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "scope": {
                            "cluster": {
                                "releaseNamespace": "str"  # Optional. Namespace
                                  where the extension Release must be placed, for a Cluster scoped
                                  extension.  If this namespace does not exist, it will be created.
                            },
                            "namespace": {
                                "targetNamespace": "str"  # Optional. Namespace where
                                  the extension will be created for an Namespace scoped extension.  If
                                  this namespace does not exist, it will be created.
                            }
                        },
                        "statuses": [
                            {
                                "code": "str",  # Optional. Status code provided by
                                  the Extension.
                                "displayStatus": "str",  # Optional. Short
                                  description of status of the extension.
                                "level": "Information",  # Optional. Default value is
                                  "Information". Level of the status. Known values are: "Error",
                                  "Warning", and "Information".
                                "message": "str",  # Optional. Detailed message of
                                  the status from the Extension.
                                "time": "str"  # Optional. DateLiteral (per ISO8601)
                                  noting the time of installation status.
                            }
                        ],
                        "version": "str"  # Optional. User-specified version of the extension
                          for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must
                          be 'false'.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_create(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        extension: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create a new Kubernetes Cluster Extension.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_rp: The Kubernetes cluster RP - i.e. Microsoft.ContainerService,
         Microsoft.Kubernetes, Microsoft.HybridContainerService. Required.
        :type cluster_rp: str
        :param cluster_resource_name: The Kubernetes cluster resource name - i.e. managedClusters,
         connectedClusters, provisionedClusters. Required.
        :type cluster_resource_name: str
        :param cluster_name: The name of the kubernetes cluster. Required.
        :type cluster_name: str
        :param extension_name: Name of the Extension. Required.
        :type extension_name: str
        :param extension: Properties necessary to Create an Extension. Required.
        :type extension: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "SystemAssigned"  # Optional. Default value is
                          "SystemAssigned". The identity type.
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "plan": {
                        "name": "str",  # A user defined name of the 3rd Party Artifact that
                          is being procured. Required.
                        "product": "str",  # The 3rd Party artifact that is being procured.
                          E.g. NewRelic. Product maps to the OfferID specified for the artifact at the
                          time of Data Market onboarding. Required.
                        "publisher": "str",  # The publisher of the 3rd Party Artifact that
                          is being bought. E.g. NewRelic. Required.
                        "promotionCode": "str",  # Optional. A publisher provided promotion
                          code as provisioned in Data Market for the said product/artifact.
                        "version": "str"  # Optional. The version of the desired
                          product/artifact.
                    },
                    "properties": {
                        "aksAssignedIdentity": {
                            "principalId": "str",  # Optional. The principal ID of
                              resource identity.
                            "tenantId": "str",  # Optional. The tenant ID of resource.
                            "type": "str"  # Optional. The identity type. Known values
                              are: "SystemAssigned" and "UserAssigned".
                        },
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "currentVersion": "str",  # Optional. Currently installed version of
                          the extension.
                        "customLocationSettings": {
                            "str": "str"  # Optional. Custom Location settings
                              properties.
                        },
                        "errorInfo": {
                            "additionalInfo": [
                                {
                                    "info": {},  # Optional. The additional info.
                                    "type": "str"  # Optional. The additional
                                      info type.
                                }
                            ],
                            "code": "str",  # Optional. The error code.
                            "details": [
                                ...
                            ],
                            "message": "str",  # Optional. The error message.
                            "target": "str"  # Optional. The error target.
                        },
                        "extensionType": "str",  # Optional. Type of the Extension, of which
                          this resource is an instance of.  It must be one of the Extension Types
                          registered with Microsoft.KubernetesConfiguration by the Extension publisher.
                        "isSystemExtension": False,  # Optional. Default value is False. Flag
                          to note if this extension is a system extension.
                        "packageUri": "str",  # Optional. Uri of the Helm package.
                        "provisioningState": "str",  # Optional. Status of installation of
                          this extension. Known values are: "Succeeded", "Failed", "Canceled",
                          "Creating", "Updating", and "Deleting".
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "scope": {
                            "cluster": {
                                "releaseNamespace": "str"  # Optional. Namespace
                                  where the extension Release must be placed, for a Cluster scoped
                                  extension.  If this namespace does not exist, it will be created.
                            },
                            "namespace": {
                                "targetNamespace": "str"  # Optional. Namespace where
                                  the extension will be created for an Namespace scoped extension.  If
                                  this namespace does not exist, it will be created.
                            }
                        },
                        "statuses": [
                            {
                                "code": "str",  # Optional. Status code provided by
                                  the Extension.
                                "displayStatus": "str",  # Optional. Short
                                  description of status of the extension.
                                "level": "Information",  # Optional. Default value is
                                  "Information". Level of the status. Known values are: "Error",
                                  "Warning", and "Information".
                                "message": "str",  # Optional. Detailed message of
                                  the status from the Extension.
                                "time": "str"  # Optional. DateLiteral (per ISO8601)
                                  noting the time of installation status.
                            }
                        ],
                        "version": "str"  # Optional. User-specified version of the extension
                          for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must
                          be 'false'.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def begin_create(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        extension: Union[JSON, IO],
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create a new Kubernetes Cluster Extension.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_rp: The Kubernetes cluster RP - i.e. Microsoft.ContainerService,
         Microsoft.Kubernetes, Microsoft.HybridContainerService. Required.
        :type cluster_rp: str
        :param cluster_resource_name: The Kubernetes cluster resource name - i.e. managedClusters,
         connectedClusters, provisionedClusters. Required.
        :type cluster_resource_name: str
        :param cluster_name: The name of the kubernetes cluster. Required.
        :type cluster_name: str
        :param extension_name: Name of the Extension. Required.
        :type extension_name: str
        :param extension: Properties necessary to Create an Extension. Is either a JSON type or a IO
         type. Required.
        :type extension: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                extension = {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "SystemAssigned"  # Optional. Default value is
                          "SystemAssigned". The identity type.
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "plan": {
                        "name": "str",  # A user defined name of the 3rd Party Artifact that
                          is being procured. Required.
                        "product": "str",  # The 3rd Party artifact that is being procured.
                          E.g. NewRelic. Product maps to the OfferID specified for the artifact at the
                          time of Data Market onboarding. Required.
                        "publisher": "str",  # The publisher of the 3rd Party Artifact that
                          is being bought. E.g. NewRelic. Required.
                        "promotionCode": "str",  # Optional. A publisher provided promotion
                          code as provisioned in Data Market for the said product/artifact.
                        "version": "str"  # Optional. The version of the desired
                          product/artifact.
                    },
                    "properties": {
                        "aksAssignedIdentity": {
                            "principalId": "str",  # Optional. The principal ID of
                              resource identity.
                            "tenantId": "str",  # Optional. The tenant ID of resource.
                            "type": "str"  # Optional. The identity type. Known values
                              are: "SystemAssigned" and "UserAssigned".
                        },
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "currentVersion": "str",  # Optional. Currently installed version of
                          the extension.
                        "customLocationSettings": {
                            "str": "str"  # Optional. Custom Location settings
                              properties.
                        },
                        "errorInfo": {
                            "additionalInfo": [
                                {
                                    "info": {},  # Optional. The additional info.
                                    "type": "str"  # Optional. The additional
                                      info type.
                                }
                            ],
                            "code": "str",  # Optional. The error code.
                            "details": [
                                ...
                            ],
                            "message": "str",  # Optional. The error message.
                            "target": "str"  # Optional. The error target.
                        },
                        "extensionType": "str",  # Optional. Type of the Extension, of which
                          this resource is an instance of.  It must be one of the Extension Types
                          registered with Microsoft.KubernetesConfiguration by the Extension publisher.
                        "isSystemExtension": False,  # Optional. Default value is False. Flag
                          to note if this extension is a system extension.
                        "packageUri": "str",  # Optional. Uri of the Helm package.
                        "provisioningState": "str",  # Optional. Status of installation of
                          this extension. Known values are: "Succeeded", "Failed", "Canceled",
                          "Creating", "Updating", and "Deleting".
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "scope": {
                            "cluster": {
                                "releaseNamespace": "str"  # Optional. Namespace
                                  where the extension Release must be placed, for a Cluster scoped
                                  extension.  If this namespace does not exist, it will be created.
                            },
                            "namespace": {
                                "targetNamespace": "str"  # Optional. Namespace where
                                  the extension will be created for an Namespace scoped extension.  If
                                  this namespace does not exist, it will be created.
                            }
                        },
                        "statuses": [
                            {
                                "code": "str",  # Optional. Status code provided by
                                  the Extension.
                                "displayStatus": "str",  # Optional. Short
                                  description of status of the extension.
                                "level": "Information",  # Optional. Default value is
                                  "Information". Level of the status. Known values are: "Error",
                                  "Warning", and "Information".
                                "message": "str",  # Optional. Detailed message of
                                  the status from the Extension.
                                "time": "str"  # Optional. DateLiteral (per ISO8601)
                                  noting the time of installation status.
                            }
                        ],
                        "version": "str"  # Optional. User-specified version of the extension
                          for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must
                          be 'false'.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "SystemAssigned"  # Optional. Default value is
                          "SystemAssigned". The identity type.
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "plan": {
                        "name": "str",  # A user defined name of the 3rd Party Artifact that
                          is being procured. Required.
                        "product": "str",  # The 3rd Party artifact that is being procured.
                          E.g. NewRelic. Product maps to the OfferID specified for the artifact at the
                          time of Data Market onboarding. Required.
                        "publisher": "str",  # The publisher of the 3rd Party Artifact that
                          is being bought. E.g. NewRelic. Required.
                        "promotionCode": "str",  # Optional. A publisher provided promotion
                          code as provisioned in Data Market for the said product/artifact.
                        "version": "str"  # Optional. The version of the desired
                          product/artifact.
                    },
                    "properties": {
                        "aksAssignedIdentity": {
                            "principalId": "str",  # Optional. The principal ID of
                              resource identity.
                            "tenantId": "str",  # Optional. The tenant ID of resource.
                            "type": "str"  # Optional. The identity type. Known values
                              are: "SystemAssigned" and "UserAssigned".
                        },
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "currentVersion": "str",  # Optional. Currently installed version of
                          the extension.
                        "customLocationSettings": {
                            "str": "str"  # Optional. Custom Location settings
                              properties.
                        },
                        "errorInfo": {
                            "additionalInfo": [
                                {
                                    "info": {},  # Optional. The additional info.
                                    "type": "str"  # Optional. The additional
                                      info type.
                                }
                            ],
                            "code": "str",  # Optional. The error code.
                            "details": [
                                ...
                            ],
                            "message": "str",  # Optional. The error message.
                            "target": "str"  # Optional. The error target.
                        },
                        "extensionType": "str",  # Optional. Type of the Extension, of which
                          this resource is an instance of.  It must be one of the Extension Types
                          registered with Microsoft.KubernetesConfiguration by the Extension publisher.
                        "isSystemExtension": False,  # Optional. Default value is False. Flag
                          to note if this extension is a system extension.
                        "packageUri": "str",  # Optional. Uri of the Helm package.
                        "provisioningState": "str",  # Optional. Status of installation of
                          this extension. Known values are: "Succeeded", "Failed", "Canceled",
                          "Creating", "Updating", and "Deleting".
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "scope": {
                            "cluster": {
                                "releaseNamespace": "str"  # Optional. Namespace
                                  where the extension Release must be placed, for a Cluster scoped
                                  extension.  If this namespace does not exist, it will be created.
                            },
                            "namespace": {
                                "targetNamespace": "str"  # Optional. Namespace where
                                  the extension will be created for an Namespace scoped extension.  If
                                  this namespace does not exist, it will be created.
                            }
                        },
                        "statuses": [
                            {
                                "code": "str",  # Optional. Status code provided by
                                  the Extension.
                                "displayStatus": "str",  # Optional. Short
                                  description of status of the extension.
                                "level": "Information",  # Optional. Default value is
                                  "Information". Level of the status. Known values are: "Error",
                                  "Warning", and "Information".
                                "message": "str",  # Optional. Detailed message of
                                  the status from the Extension.
                                "time": "str"  # Optional. DateLiteral (per ISO8601)
                                  noting the time of installation status.
                            }
                        ],
                        "version": "str"  # Optional. User-specified version of the extension
                          for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must
                          be 'false'.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_initial(
                resource_group_name=resource_group_name,
                cluster_rp=cluster_rp,
                cluster_resource_name=cluster_resource_name,
                cluster_name=cluster_name,
                extension_name=extension_name,
                extension=extension,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def get(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        **kwargs: Any
    ) -> JSON:
        """Gets Kubernetes Cluster Extension.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_rp: The Kubernetes cluster RP - i.e. Microsoft.ContainerService,
         Microsoft.Kubernetes, Microsoft.HybridContainerService. Required.
        :type cluster_rp: str
        :param cluster_resource_name: The Kubernetes cluster resource name - i.e. managedClusters,
         connectedClusters, provisionedClusters. Required.
        :type cluster_resource_name: str
        :param cluster_name: The name of the kubernetes cluster. Required.
        :type cluster_name: str
        :param extension_name: Name of the Extension. Required.
        :type extension_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "SystemAssigned"  # Optional. Default value is
                          "SystemAssigned". The identity type.
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "plan": {
                        "name": "str",  # A user defined name of the 3rd Party Artifact that
                          is being procured. Required.
                        "product": "str",  # The 3rd Party artifact that is being procured.
                          E.g. NewRelic. Product maps to the OfferID specified for the artifact at the
                          time of Data Market onboarding. Required.
                        "publisher": "str",  # The publisher of the 3rd Party Artifact that
                          is being bought. E.g. NewRelic. Required.
                        "promotionCode": "str",  # Optional. A publisher provided promotion
                          code as provisioned in Data Market for the said product/artifact.
                        "version": "str"  # Optional. The version of the desired
                          product/artifact.
                    },
                    "properties": {
                        "aksAssignedIdentity": {
                            "principalId": "str",  # Optional. The principal ID of
                              resource identity.
                            "tenantId": "str",  # Optional. The tenant ID of resource.
                            "type": "str"  # Optional. The identity type. Known values
                              are: "SystemAssigned" and "UserAssigned".
                        },
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "currentVersion": "str",  # Optional. Currently installed version of
                          the extension.
                        "customLocationSettings": {
                            "str": "str"  # Optional. Custom Location settings
                              properties.
                        },
                        "errorInfo": {
                            "additionalInfo": [
                                {
                                    "info": {},  # Optional. The additional info.
                                    "type": "str"  # Optional. The additional
                                      info type.
                                }
                            ],
                            "code": "str",  # Optional. The error code.
                            "details": [
                                ...
                            ],
                            "message": "str",  # Optional. The error message.
                            "target": "str"  # Optional. The error target.
                        },
                        "extensionType": "str",  # Optional. Type of the Extension, of which
                          this resource is an instance of.  It must be one of the Extension Types
                          registered with Microsoft.KubernetesConfiguration by the Extension publisher.
                        "isSystemExtension": False,  # Optional. Default value is False. Flag
                          to note if this extension is a system extension.
                        "packageUri": "str",  # Optional. Uri of the Helm package.
                        "provisioningState": "str",  # Optional. Status of installation of
                          this extension. Known values are: "Succeeded", "Failed", "Canceled",
                          "Creating", "Updating", and "Deleting".
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "scope": {
                            "cluster": {
                                "releaseNamespace": "str"  # Optional. Namespace
                                  where the extension Release must be placed, for a Cluster scoped
                                  extension.  If this namespace does not exist, it will be created.
                            },
                            "namespace": {
                                "targetNamespace": "str"  # Optional. Namespace where
                                  the extension will be created for an Namespace scoped extension.  If
                                  this namespace does not exist, it will be created.
                            }
                        },
                        "statuses": [
                            {
                                "code": "str",  # Optional. Status code provided by
                                  the Extension.
                                "displayStatus": "str",  # Optional. Short
                                  description of status of the extension.
                                "level": "Information",  # Optional. Default value is
                                  "Information". Level of the status. Known values are: "Error",
                                  "Warning", and "Information".
                                "message": "str",  # Optional. Detailed message of
                                  the status from the Extension.
                                "time": "str"  # Optional. DateLiteral (per ISO8601)
                                  noting the time of installation status.
                            }
                        ],
                        "version": "str"  # Optional. User-specified version of the extension
                          for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must
                          be 'false'.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_extensions_get_request(
            resource_group_name=resource_group_name,
            cluster_rp=cluster_rp,
            cluster_resource_name=cluster_resource_name,
            cluster_name=cluster_name,
            extension_name=extension_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    def _delete_initial(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        *,
        force_delete: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_extensions_delete_request(
            resource_group_name=resource_group_name,
            cluster_rp=cluster_rp,
            cluster_resource_name=cluster_resource_name,
            cluster_name=cluster_name,
            extension_name=extension_name,
            subscription_id=self._config.subscription_id,
            force_delete=force_delete,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def begin_delete(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        *,
        force_delete: Optional[bool] = None,
        **kwargs: Any
    ) -> LROPoller[None]:
        """Delete a Kubernetes Cluster Extension. This will cause the Agent to Uninstall the extension
        from the cluster.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_rp: The Kubernetes cluster RP - i.e. Microsoft.ContainerService,
         Microsoft.Kubernetes, Microsoft.HybridContainerService. Required.
        :type cluster_rp: str
        :param cluster_resource_name: The Kubernetes cluster resource name - i.e. managedClusters,
         connectedClusters, provisionedClusters. Required.
        :type cluster_resource_name: str
        :param cluster_name: The name of the kubernetes cluster. Required.
        :type cluster_name: str
        :param extension_name: Name of the Extension. Required.
        :type extension_name: str
        :keyword force_delete: Delete the extension resource in Azure - not the normal asynchronous
         delete. Default value is None.
        :paramtype force_delete: bool
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(  # type: ignore
                resource_group_name=resource_group_name,
                cluster_rp=cluster_rp,
                cluster_resource_name=cluster_resource_name,
                cluster_name=cluster_name,
                extension_name=extension_name,
                force_delete=force_delete,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _update_initial(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        patch_extension: Union[JSON, IO],
        **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(patch_extension, (IOBase, bytes)):
            _content = patch_extension
        else:
            _json = patch_extension

        request = build_extensions_update_request(
            resource_group_name=resource_group_name,
            cluster_rp=cluster_rp,
            cluster_resource_name=cluster_resource_name,
            cluster_name=cluster_name,
            extension_name=extension_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 202:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        patch_extension: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Patch an existing Kubernetes Cluster Extension.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_rp: The Kubernetes cluster RP - i.e. Microsoft.ContainerService,
         Microsoft.Kubernetes, Microsoft.HybridContainerService. Required.
        :type cluster_rp: str
        :param cluster_resource_name: The Kubernetes cluster resource name - i.e. managedClusters,
         connectedClusters, provisionedClusters. Required.
        :type cluster_resource_name: str
        :param cluster_name: The name of the kubernetes cluster. Required.
        :type cluster_name: str
        :param extension_name: Name of the Extension. Required.
        :type extension_name: str
        :param patch_extension: Properties to Patch in an existing Extension. Required.
        :type patch_extension: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                patch_extension = {
                    "properties": {
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "version": "str"  # Optional. Version of the extension for this
                          extension, if it is 'pinned' to a specific version. autoUpgradeMinorVersion
                          must be 'false'.
                    }
                }

                # response body for status code(s): 200, 202
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "SystemAssigned"  # Optional. Default value is
                          "SystemAssigned". The identity type.
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "plan": {
                        "name": "str",  # A user defined name of the 3rd Party Artifact that
                          is being procured. Required.
                        "product": "str",  # The 3rd Party artifact that is being procured.
                          E.g. NewRelic. Product maps to the OfferID specified for the artifact at the
                          time of Data Market onboarding. Required.
                        "publisher": "str",  # The publisher of the 3rd Party Artifact that
                          is being bought. E.g. NewRelic. Required.
                        "promotionCode": "str",  # Optional. A publisher provided promotion
                          code as provisioned in Data Market for the said product/artifact.
                        "version": "str"  # Optional. The version of the desired
                          product/artifact.
                    },
                    "properties": {
                        "aksAssignedIdentity": {
                            "principalId": "str",  # Optional. The principal ID of
                              resource identity.
                            "tenantId": "str",  # Optional. The tenant ID of resource.
                            "type": "str"  # Optional. The identity type. Known values
                              are: "SystemAssigned" and "UserAssigned".
                        },
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "currentVersion": "str",  # Optional. Currently installed version of
                          the extension.
                        "customLocationSettings": {
                            "str": "str"  # Optional. Custom Location settings
                              properties.
                        },
                        "errorInfo": {
                            "additionalInfo": [
                                {
                                    "info": {},  # Optional. The additional info.
                                    "type": "str"  # Optional. The additional
                                      info type.
                                }
                            ],
                            "code": "str",  # Optional. The error code.
                            "details": [
                                ...
                            ],
                            "message": "str",  # Optional. The error message.
                            "target": "str"  # Optional. The error target.
                        },
                        "extensionType": "str",  # Optional. Type of the Extension, of which
                          this resource is an instance of.  It must be one of the Extension Types
                          registered with Microsoft.KubernetesConfiguration by the Extension publisher.
                        "isSystemExtension": False,  # Optional. Default value is False. Flag
                          to note if this extension is a system extension.
                        "packageUri": "str",  # Optional. Uri of the Helm package.
                        "provisioningState": "str",  # Optional. Status of installation of
                          this extension. Known values are: "Succeeded", "Failed", "Canceled",
                          "Creating", "Updating", and "Deleting".
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "scope": {
                            "cluster": {
                                "releaseNamespace": "str"  # Optional. Namespace
                                  where the extension Release must be placed, for a Cluster scoped
                                  extension.  If this namespace does not exist, it will be created.
                            },
                            "namespace": {
                                "targetNamespace": "str"  # Optional. Namespace where
                                  the extension will be created for an Namespace scoped extension.  If
                                  this namespace does not exist, it will be created.
                            }
                        },
                        "statuses": [
                            {
                                "code": "str",  # Optional. Status code provided by
                                  the Extension.
                                "displayStatus": "str",  # Optional. Short
                                  description of status of the extension.
                                "level": "Information",  # Optional. Default value is
                                  "Information". Level of the status. Known values are: "Error",
                                  "Warning", and "Information".
                                "message": "str",  # Optional. Detailed message of
                                  the status from the Extension.
                                "time": "str"  # Optional. DateLiteral (per ISO8601)
                                  noting the time of installation status.
                            }
                        ],
                        "version": "str"  # Optional. User-specified version of the extension
                          for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must
                          be 'false'.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        patch_extension: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Patch an existing Kubernetes Cluster Extension.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_rp: The Kubernetes cluster RP - i.e. Microsoft.ContainerService,
         Microsoft.Kubernetes, Microsoft.HybridContainerService. Required.
        :type cluster_rp: str
        :param cluster_resource_name: The Kubernetes cluster resource name - i.e. managedClusters,
         connectedClusters, provisionedClusters. Required.
        :type cluster_resource_name: str
        :param cluster_name: The name of the kubernetes cluster. Required.
        :type cluster_name: str
        :param extension_name: Name of the Extension. Required.
        :type extension_name: str
        :param patch_extension: Properties to Patch in an existing Extension. Required.
        :type patch_extension: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 202
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "SystemAssigned"  # Optional. Default value is
                          "SystemAssigned". The identity type.
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "plan": {
                        "name": "str",  # A user defined name of the 3rd Party Artifact that
                          is being procured. Required.
                        "product": "str",  # The 3rd Party artifact that is being procured.
                          E.g. NewRelic. Product maps to the OfferID specified for the artifact at the
                          time of Data Market onboarding. Required.
                        "publisher": "str",  # The publisher of the 3rd Party Artifact that
                          is being bought. E.g. NewRelic. Required.
                        "promotionCode": "str",  # Optional. A publisher provided promotion
                          code as provisioned in Data Market for the said product/artifact.
                        "version": "str"  # Optional. The version of the desired
                          product/artifact.
                    },
                    "properties": {
                        "aksAssignedIdentity": {
                            "principalId": "str",  # Optional. The principal ID of
                              resource identity.
                            "tenantId": "str",  # Optional. The tenant ID of resource.
                            "type": "str"  # Optional. The identity type. Known values
                              are: "SystemAssigned" and "UserAssigned".
                        },
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "currentVersion": "str",  # Optional. Currently installed version of
                          the extension.
                        "customLocationSettings": {
                            "str": "str"  # Optional. Custom Location settings
                              properties.
                        },
                        "errorInfo": {
                            "additionalInfo": [
                                {
                                    "info": {},  # Optional. The additional info.
                                    "type": "str"  # Optional. The additional
                                      info type.
                                }
                            ],
                            "code": "str",  # Optional. The error code.
                            "details": [
                                ...
                            ],
                            "message": "str",  # Optional. The error message.
                            "target": "str"  # Optional. The error target.
                        },
                        "extensionType": "str",  # Optional. Type of the Extension, of which
                          this resource is an instance of.  It must be one of the Extension Types
                          registered with Microsoft.KubernetesConfiguration by the Extension publisher.
                        "isSystemExtension": False,  # Optional. Default value is False. Flag
                          to note if this extension is a system extension.
                        "packageUri": "str",  # Optional. Uri of the Helm package.
                        "provisioningState": "str",  # Optional. Status of installation of
                          this extension. Known values are: "Succeeded", "Failed", "Canceled",
                          "Creating", "Updating", and "Deleting".
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "scope": {
                            "cluster": {
                                "releaseNamespace": "str"  # Optional. Namespace
                                  where the extension Release must be placed, for a Cluster scoped
                                  extension.  If this namespace does not exist, it will be created.
                            },
                            "namespace": {
                                "targetNamespace": "str"  # Optional. Namespace where
                                  the extension will be created for an Namespace scoped extension.  If
                                  this namespace does not exist, it will be created.
                            }
                        },
                        "statuses": [
                            {
                                "code": "str",  # Optional. Status code provided by
                                  the Extension.
                                "displayStatus": "str",  # Optional. Short
                                  description of status of the extension.
                                "level": "Information",  # Optional. Default value is
                                  "Information". Level of the status. Known values are: "Error",
                                  "Warning", and "Information".
                                "message": "str",  # Optional. Detailed message of
                                  the status from the Extension.
                                "time": "str"  # Optional. DateLiteral (per ISO8601)
                                  noting the time of installation status.
                            }
                        ],
                        "version": "str"  # Optional. User-specified version of the extension
                          for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must
                          be 'false'.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def begin_update(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        patch_extension: Union[JSON, IO],
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Patch an existing Kubernetes Cluster Extension.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_rp: The Kubernetes cluster RP - i.e. Microsoft.ContainerService,
         Microsoft.Kubernetes, Microsoft.HybridContainerService. Required.
        :type cluster_rp: str
        :param cluster_resource_name: The Kubernetes cluster resource name - i.e. managedClusters,
         connectedClusters, provisionedClusters. Required.
        :type cluster_resource_name: str
        :param cluster_name: The name of the kubernetes cluster. Required.
        :type cluster_name: str
        :param extension_name: Name of the Extension. Required.
        :type extension_name: str
        :param patch_extension: Properties to Patch in an existing Extension. Is either a JSON type or
         a IO type. Required.
        :type patch_extension: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                patch_extension = {
                    "properties": {
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "version": "str"  # Optional. Version of the extension for this
                          extension, if it is 'pinned' to a specific version. autoUpgradeMinorVersion
                          must be 'false'.
                    }
                }

                # response body for status code(s): 200, 202
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "SystemAssigned"  # Optional. Default value is
                          "SystemAssigned". The identity type.
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "plan": {
                        "name": "str",  # A user defined name of the 3rd Party Artifact that
                          is being procured. Required.
                        "product": "str",  # The 3rd Party artifact that is being procured.
                          E.g. NewRelic. Product maps to the OfferID specified for the artifact at the
                          time of Data Market onboarding. Required.
                        "publisher": "str",  # The publisher of the 3rd Party Artifact that
                          is being bought. E.g. NewRelic. Required.
                        "promotionCode": "str",  # Optional. A publisher provided promotion
                          code as provisioned in Data Market for the said product/artifact.
                        "version": "str"  # Optional. The version of the desired
                          product/artifact.
                    },
                    "properties": {
                        "aksAssignedIdentity": {
                            "principalId": "str",  # Optional. The principal ID of
                              resource identity.
                            "tenantId": "str",  # Optional. The tenant ID of resource.
                            "type": "str"  # Optional. The identity type. Known values
                              are: "SystemAssigned" and "UserAssigned".
                        },
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "currentVersion": "str",  # Optional. Currently installed version of
                          the extension.
                        "customLocationSettings": {
                            "str": "str"  # Optional. Custom Location settings
                              properties.
                        },
                        "errorInfo": {
                            "additionalInfo": [
                                {
                                    "info": {},  # Optional. The additional info.
                                    "type": "str"  # Optional. The additional
                                      info type.
                                }
                            ],
                            "code": "str",  # Optional. The error code.
                            "details": [
                                ...
                            ],
                            "message": "str",  # Optional. The error message.
                            "target": "str"  # Optional. The error target.
                        },
                        "extensionType": "str",  # Optional. Type of the Extension, of which
                          this resource is an instance of.  It must be one of the Extension Types
                          registered with Microsoft.KubernetesConfiguration by the Extension publisher.
                        "isSystemExtension": False,  # Optional. Default value is False. Flag
                          to note if this extension is a system extension.
                        "packageUri": "str",  # Optional. Uri of the Helm package.
                        "provisioningState": "str",  # Optional. Status of installation of
                          this extension. Known values are: "Succeeded", "Failed", "Canceled",
                          "Creating", "Updating", and "Deleting".
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "scope": {
                            "cluster": {
                                "releaseNamespace": "str"  # Optional. Namespace
                                  where the extension Release must be placed, for a Cluster scoped
                                  extension.  If this namespace does not exist, it will be created.
                            },
                            "namespace": {
                                "targetNamespace": "str"  # Optional. Namespace where
                                  the extension will be created for an Namespace scoped extension.  If
                                  this namespace does not exist, it will be created.
                            }
                        },
                        "statuses": [
                            {
                                "code": "str",  # Optional. Status code provided by
                                  the Extension.
                                "displayStatus": "str",  # Optional. Short
                                  description of status of the extension.
                                "level": "Information",  # Optional. Default value is
                                  "Information". Level of the status. Known values are: "Error",
                                  "Warning", and "Information".
                                "message": "str",  # Optional. Detailed message of
                                  the status from the Extension.
                                "time": "str"  # Optional. DateLiteral (per ISO8601)
                                  noting the time of installation status.
                            }
                        ],
                        "version": "str"  # Optional. User-specified version of the extension
                          for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must
                          be 'false'.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._update_initial(
                resource_group_name=resource_group_name,
                cluster_rp=cluster_rp,
                cluster_resource_name=cluster_resource_name,
                cluster_name=cluster_name,
                extension_name=extension_name,
                patch_extension=patch_extension,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def list(
        self, resource_group_name: str, cluster_rp: str, cluster_resource_name: str, cluster_name: str, **kwargs: Any
    ) -> Iterable[JSON]:
        """List all Extensions in the cluster.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_rp: The Kubernetes cluster RP - i.e. Microsoft.ContainerService,
         Microsoft.Kubernetes, Microsoft.HybridContainerService. Required.
        :type cluster_rp: str
        :param cluster_resource_name: The Kubernetes cluster resource name - i.e. managedClusters,
         connectedClusters, provisionedClusters. Required.
        :type cluster_resource_name: str
        :param cluster_name: The name of the kubernetes cluster. Required.
        :type cluster_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "identity": {
                        "principalId": "str",  # Optional. The principal ID of resource
                          identity.
                        "tenantId": "str",  # Optional. The tenant ID of resource.
                        "type": "SystemAssigned"  # Optional. Default value is
                          "SystemAssigned". The identity type.
                    },
                    "name": "str",  # Optional. The name of the resource.
                    "plan": {
                        "name": "str",  # A user defined name of the 3rd Party Artifact that
                          is being procured. Required.
                        "product": "str",  # The 3rd Party artifact that is being procured.
                          E.g. NewRelic. Product maps to the OfferID specified for the artifact at the
                          time of Data Market onboarding. Required.
                        "publisher": "str",  # The publisher of the 3rd Party Artifact that
                          is being bought. E.g. NewRelic. Required.
                        "promotionCode": "str",  # Optional. A publisher provided promotion
                          code as provisioned in Data Market for the said product/artifact.
                        "version": "str"  # Optional. The version of the desired
                          product/artifact.
                    },
                    "properties": {
                        "aksAssignedIdentity": {
                            "principalId": "str",  # Optional. The principal ID of
                              resource identity.
                            "tenantId": "str",  # Optional. The tenant ID of resource.
                            "type": "str"  # Optional. The identity type. Known values
                              are: "SystemAssigned" and "UserAssigned".
                        },
                        "autoUpgradeMinorVersion": True,  # Optional. Default value is True.
                          Flag to note if this extension participates in auto upgrade of minor version,
                          or not.
                        "configurationProtectedSettings": {
                            "str": "str"  # Optional. Configuration settings that are
                              sensitive, as name-value pairs for configuring this extension.
                        },
                        "configurationSettings": {
                            "str": "str"  # Optional. Configuration settings, as
                              name-value pairs for configuring this extension.
                        },
                        "currentVersion": "str",  # Optional. Currently installed version of
                          the extension.
                        "customLocationSettings": {
                            "str": "str"  # Optional. Custom Location settings
                              properties.
                        },
                        "errorInfo": {
                            "additionalInfo": [
                                {
                                    "info": {},  # Optional. The additional info.
                                    "type": "str"  # Optional. The additional
                                      info type.
                                }
                            ],
                            "code": "str",  # Optional. The error code.
                            "details": [
                                ...
                            ],
                            "message": "str",  # Optional. The error message.
                            "target": "str"  # Optional. The error target.
                        },
                        "extensionType": "str",  # Optional. Type of the Extension, of which
                          this resource is an instance of.  It must be one of the Extension Types
                          registered with Microsoft.KubernetesConfiguration by the Extension publisher.
                        "isSystemExtension": False,  # Optional. Default value is False. Flag
                          to note if this extension is a system extension.
                        "packageUri": "str",  # Optional. Uri of the Helm package.
                        "provisioningState": "str",  # Optional. Status of installation of
                          this extension. Known values are: "Succeeded", "Failed", "Canceled",
                          "Creating", "Updating", and "Deleting".
                        "releaseTrain": "Stable",  # Optional. Default value is "Stable".
                          ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable,
                          Preview, etc.) - only if autoUpgradeMinorVersion is 'true'.
                        "scope": {
                            "cluster": {
                                "releaseNamespace": "str"  # Optional. Namespace
                                  where the extension Release must be placed, for a Cluster scoped
                                  extension.  If this namespace does not exist, it will be created.
                            },
                            "namespace": {
                                "targetNamespace": "str"  # Optional. Namespace where
                                  the extension will be created for an Namespace scoped extension.  If
                                  this namespace does not exist, it will be created.
                            }
                        },
                        "statuses": [
                            {
                                "code": "str",  # Optional. Status code provided by
                                  the Extension.
                                "displayStatus": "str",  # Optional. Short
                                  description of status of the extension.
                                "level": "Information",  # Optional. Default value is
                                  "Information". Level of the status. Known values are: "Error",
                                  "Warning", and "Information".
                                "message": "str",  # Optional. Detailed message of
                                  the status from the Extension.
                                "time": "str"  # Optional. DateLiteral (per ISO8601)
                                  noting the time of installation status.
                            }
                        ],
                        "version": "str"  # Optional. User-specified version of the extension
                          for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must
                          be 'false'.
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The timestamp
                          of resource last modification (UTC).
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_extensions_list_request(
                    resource_group_name=resource_group_name,
                    cluster_rp=cluster_rp,
                    cluster_resource_name=cluster_resource_name,
                    cluster_name=cluster_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class OperationStatusOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~k8sconfig.mgmt.KubernetesConfigurationClient`'s
        :attr:`operation_status` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(
        self,
        resource_group_name: str,
        cluster_rp: str,
        cluster_resource_name: str,
        cluster_name: str,
        extension_name: str,
        operation_id: str,
        **kwargs: Any
    ) -> JSON:
        """Get Async Operation status.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param cluster_rp: The Kubernetes cluster RP - i.e. Microsoft.ContainerService,
         Microsoft.Kubernetes, Microsoft.HybridContainerService. Required.
        :type cluster_rp: str
        :param cluster_resource_name: The Kubernetes cluster resource name - i.e. managedClusters,
         connectedClusters, provisionedClusters. Required.
        :type cluster_resource_name: str
        :param cluster_name: The name of the kubernetes cluster. Required.
        :type cluster_name: str
        :param extension_name: Name of the Extension. Required.
        :type extension_name: str
        :param operation_id: operation Id. Required.
        :type operation_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "status": "str",  # Operation status. Required.
                    "error": {
                        "additionalInfo": [
                            {
                                "info": {},  # Optional. The additional info.
                                "type": "str"  # Optional. The additional info type.
                            }
                        ],
                        "code": "str",  # Optional. The error code.
                        "details": [
                            ...
                        ],
                        "message": "str",  # Optional. The error message.
                        "target": "str"  # Optional. The error target.
                    },
                    "id": "str",  # Optional. Fully qualified ID for the async operation.
                    "name": "str",  # Optional. Name of the async operation.
                    "properties": {
                        "str": "str"  # Optional. Additional information, if available.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_operation_status_get_request(
            resource_group_name=resource_group_name,
            cluster_rp=cluster_rp,
            cluster_resource_name=cluster_resource_name,
            cluster_name=cluster_name,
            extension_name=extension_name,
            operation_id=operation_id,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)
