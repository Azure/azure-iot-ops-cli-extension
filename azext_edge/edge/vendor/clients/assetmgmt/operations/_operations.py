# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Iterable, Iterator, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_operations_list_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.DeviceRegistry/operations"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_asset_endpoint_profiles_list_by_subscription_request(  # pylint: disable=name-too-long
    subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/assetEndpointProfiles"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_asset_endpoint_profiles_list_by_resource_group_request(  # pylint: disable=name-too-long
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assetEndpointProfiles"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_asset_endpoint_profiles_get_request(  # pylint: disable=name-too-long
    resource_group_name: str, asset_endpoint_profile_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assetEndpointProfiles/{assetEndpointProfileName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "assetEndpointProfileName": _SERIALIZER.url(
            "asset_endpoint_profile_name",
            asset_endpoint_profile_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-z0-9][a-z0-9-]*[a-z0-9]$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_asset_endpoint_profiles_create_or_replace_request(  # pylint: disable=name-too-long
    resource_group_name: str, asset_endpoint_profile_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assetEndpointProfiles/{assetEndpointProfileName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "assetEndpointProfileName": _SERIALIZER.url(
            "asset_endpoint_profile_name",
            asset_endpoint_profile_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-z0-9][a-z0-9-]*[a-z0-9]$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_asset_endpoint_profiles_update_request(  # pylint: disable=name-too-long
    resource_group_name: str, asset_endpoint_profile_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assetEndpointProfiles/{assetEndpointProfileName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "assetEndpointProfileName": _SERIALIZER.url(
            "asset_endpoint_profile_name",
            asset_endpoint_profile_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-z0-9][a-z0-9-]*[a-z0-9]$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_asset_endpoint_profiles_delete_request(  # pylint: disable=name-too-long
    resource_group_name: str, asset_endpoint_profile_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assetEndpointProfiles/{assetEndpointProfileName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "assetEndpointProfileName": _SERIALIZER.url(
            "asset_endpoint_profile_name",
            asset_endpoint_profile_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-z0-9][a-z0-9-]*[a-z0-9]$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_assets_list_by_subscription_request(  # pylint: disable=name-too-long
    subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/assets"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_assets_list_by_resource_group_request(  # pylint: disable=name-too-long
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = (
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assets"
    )
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_assets_get_request(
    resource_group_name: str, asset_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assets/{assetName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "assetName": _SERIALIZER.url(
            "asset_name", asset_name, "str", max_length=63, min_length=3, pattern=r"^[a-z0-9][a-z0-9-]*[a-z0-9]$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_assets_create_or_replace_request(
    resource_group_name: str, asset_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assets/{assetName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "assetName": _SERIALIZER.url(
            "asset_name", asset_name, "str", max_length=63, min_length=3, pattern=r"^[a-z0-9][a-z0-9-]*[a-z0-9]$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_assets_update_request(
    resource_group_name: str, asset_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assets/{assetName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "assetName": _SERIALIZER.url(
            "asset_name", asset_name, "str", max_length=63, min_length=3, pattern=r"^[a-z0-9][a-z0-9-]*[a-z0-9]$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_assets_delete_request(
    resource_group_name: str, asset_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assets/{assetName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1
        ),
        "assetName": _SERIALIZER.url(
            "asset_name", asset_name, "str", max_length=63, min_length=3, pattern=r"^[a-z0-9][a-z0-9-]*[a-z0-9]$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_billing_containers_list_by_subscription_request(  # pylint: disable=name-too-long
    subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/billingContainers"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_billing_containers_get_request(
    billing_container_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/billingContainers/{billingContainerName}"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "billingContainerName": _SERIALIZER.url(
            "billing_container_name",
            billing_container_name,
            "str",
            max_length=64,
            min_length=3,
            pattern=r"^[0-9a-zA-Z][a-zA-Z0-9-]*$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_operation_status_get_request(
    location: str, operation_id: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/locations/{location}/operationStatuses/{operationId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "location": _SERIALIZER.url("location", location, "str", min_length=1),
        "operationId": _SERIALIZER.url("operation_id", operation_id, "str", min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class Operations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~deviceregistry.mgmt.MicrosoftDeviceRegistryManagementService`'s
        :attr:`operations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable[JSON]:
        """List the operations for the provider.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",
                    "display": {
                        "description": "str",
                        "operation": "str",
                        "provider": "str",
                        "resource": "str"
                    },
                    "isDataAction": bool,
                    "name": "str",
                    "origin": "str"
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_operations_list_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class AssetEndpointProfilesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~deviceregistry.mgmt.MicrosoftDeviceRegistryManagementService`'s
        :attr:`asset_endpoint_profiles` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> Iterable[JSON]:
        """List AssetEndpointProfile resources by subscription ID.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_asset_endpoint_profiles_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> Iterable[JSON]:
        """List AssetEndpointProfile resources by resource group.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_asset_endpoint_profiles_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get(self, resource_group_name: str, asset_endpoint_profile_name: str, **kwargs: Any) -> JSON:
        """Get a AssetEndpointProfile.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_endpoint_profile_name: Asset Endpoint Profile name parameter. Required.
        :type asset_endpoint_profile_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_asset_endpoint_profiles_get_request(
            resource_group_name=resource_group_name,
            asset_endpoint_profile_name=asset_endpoint_profile_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    def _create_or_replace_initial(
        self,
        resource_group_name: str,
        asset_endpoint_profile_name: str,
        resource: Union[JSON, IO[bytes]],
        **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _json = resource

        _request = build_asset_endpoint_profiles_create_or_replace_request(
            resource_group_name=resource_group_name,
            asset_endpoint_profile_name=asset_endpoint_profile_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 201:
            response_headers["Azure-AsyncOperation"] = self._deserialize(
                "str", response.headers.get("Azure-AsyncOperation")
            )
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), response_headers)  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore

    @overload
    def begin_create_or_replace(
        self,
        resource_group_name: str,
        asset_endpoint_profile_name: str,
        resource: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create a AssetEndpointProfile.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_endpoint_profile_name: Asset Endpoint Profile name parameter. Required.
        :type asset_endpoint_profile_name: str
        :param resource: Resource create parameters. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }

                # response body for status code(s): 200, 201
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """

    @overload
    def begin_create_or_replace(
        self,
        resource_group_name: str,
        asset_endpoint_profile_name: str,
        resource: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create a AssetEndpointProfile.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_endpoint_profile_name: Asset Endpoint Profile name parameter. Required.
        :type asset_endpoint_profile_name: str
        :param resource: Resource create parameters. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """

    @distributed_trace
    def begin_create_or_replace(
        self,
        resource_group_name: str,
        asset_endpoint_profile_name: str,
        resource: Union[JSON, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create a AssetEndpointProfile.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_endpoint_profile_name: Asset Endpoint Profile name parameter. Required.
        :type asset_endpoint_profile_name: str
        :param resource: Resource create parameters. Is either a JSON type or a IO[bytes] type.
         Required.
        :type resource: JSON or IO[bytes]
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }

                # response body for status code(s): 200, 201
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_or_replace_initial(
                resource_group_name=resource_group_name,
                asset_endpoint_profile_name=asset_endpoint_profile_name,
                resource=resource,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[JSON].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[JSON](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _update_initial(
        self,
        resource_group_name: str,
        asset_endpoint_profile_name: str,
        properties: Union[JSON, IO[bytes]],
        **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(properties, (IOBase, bytes)):
            _content = properties
        else:
            _json = properties

        _request = build_asset_endpoint_profiles_update_request(
            resource_group_name=resource_group_name,
            asset_endpoint_profile_name=asset_endpoint_profile_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), response_headers)  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        asset_endpoint_profile_name: str,
        properties: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update a AssetEndpointProfile.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_endpoint_profile_name: Asset Endpoint Profile name parameter. Required.
        :type asset_endpoint_profile_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "properties": {
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "endpointProfileType": "str",
                        "targetAddress": "str"
                    },
                    "tags": {
                        "str": "str"
                    }
                }

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        asset_endpoint_profile_name: str,
        properties: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update a AssetEndpointProfile.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_endpoint_profile_name: Asset Endpoint Profile name parameter. Required.
        :type asset_endpoint_profile_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """

    @distributed_trace
    def begin_update(
        self,
        resource_group_name: str,
        asset_endpoint_profile_name: str,
        properties: Union[JSON, IO[bytes]],
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update a AssetEndpointProfile.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_endpoint_profile_name: Asset Endpoint Profile name parameter. Required.
        :type asset_endpoint_profile_name: str
        :param properties: The resource properties to be updated. Is either a JSON type or a IO[bytes]
         type. Required.
        :type properties: JSON or IO[bytes]
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "properties": {
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "endpointProfileType": "str",
                        "targetAddress": "str"
                    },
                    "tags": {
                        "str": "str"
                    }
                }

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "endpointProfileType": "str",
                        "targetAddress": "str",
                        "additionalConfiguration": "str",
                        "authentication": {
                            "method": "str",
                            "usernamePasswordCredentials": {
                                "passwordSecretName": "str",
                                "usernameSecretName": "str"
                            },
                            "x509Credentials": {
                                "certificateSecretName": "str"
                            }
                        },
                        "discoveredAssetEndpointProfileRef": "str",
                        "provisioningState": "str",
                        "status": {
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ]
                        },
                        "uuid": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._update_initial(
                resource_group_name=resource_group_name,
                asset_endpoint_profile_name=asset_endpoint_profile_name,
                properties=properties,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "location"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[JSON].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[JSON](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _delete_initial(
        self, resource_group_name: str, asset_endpoint_profile_name: str, **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        _request = build_asset_endpoint_profiles_delete_request(
            resource_group_name=resource_group_name,
            asset_endpoint_profile_name=asset_endpoint_profile_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), response_headers)  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore

    @distributed_trace
    def begin_delete(
        self, resource_group_name: str, asset_endpoint_profile_name: str, **kwargs: Any
    ) -> LROPoller[None]:
        """Delete a AssetEndpointProfile.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_endpoint_profile_name: Asset Endpoint Profile name parameter. Required.
        :type asset_endpoint_profile_name: str
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(
                resource_group_name=resource_group_name,
                asset_endpoint_profile_name=asset_endpoint_profile_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})  # type: ignore

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "location"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[None].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[None](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore


class AssetsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~deviceregistry.mgmt.MicrosoftDeviceRegistryManagementService`'s
        :attr:`assets` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> Iterable[JSON]:
        """List Asset resources by subscription ID.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_assets_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> Iterable[JSON]:
        """List Asset resources by resource group.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_assets_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get(self, resource_group_name: str, asset_name: str, **kwargs: Any) -> JSON:
        """Get a Asset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_name: Asset name parameter. Required.
        :type asset_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_assets_get_request(
            resource_group_name=resource_group_name,
            asset_name=asset_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    def _create_or_replace_initial(
        self, resource_group_name: str, asset_name: str, resource: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _json = resource

        _request = build_assets_create_or_replace_request(
            resource_group_name=resource_group_name,
            asset_name=asset_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 201:
            response_headers["Azure-AsyncOperation"] = self._deserialize(
                "str", response.headers.get("Azure-AsyncOperation")
            )
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), response_headers)  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore

    @overload
    def begin_create_or_replace(
        self,
        resource_group_name: str,
        asset_name: str,
        resource: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create a Asset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_name: Asset name parameter. Required.
        :type asset_name: str
        :param resource: Resource create parameters. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }

                # response body for status code(s): 200, 201
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """

    @overload
    def begin_create_or_replace(
        self,
        resource_group_name: str,
        asset_name: str,
        resource: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create a Asset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_name: Asset name parameter. Required.
        :type asset_name: str
        :param resource: Resource create parameters. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """

    @distributed_trace
    def begin_create_or_replace(
        self, resource_group_name: str, asset_name: str, resource: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> LROPoller[JSON]:
        """Create a Asset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_name: Asset name parameter. Required.
        :type asset_name: str
        :param resource: Resource create parameters. Is either a JSON type or a IO[bytes] type.
         Required.
        :type resource: JSON or IO[bytes]
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }

                # response body for status code(s): 200, 201
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_or_replace_initial(
                resource_group_name=resource_group_name,
                asset_name=asset_name,
                resource=resource,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[JSON].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[JSON](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _update_initial(
        self, resource_group_name: str, asset_name: str, properties: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(properties, (IOBase, bytes)):
            _content = properties
        else:
            _json = properties

        _request = build_assets_update_request(
            resource_group_name=resource_group_name,
            asset_name=asset_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), response_headers)  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        asset_name: str,
        properties: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update a Asset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_name: Asset name parameter. Required.
        :type asset_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "properties": {
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str"
                    },
                    "tags": {
                        "str": "str"
                    }
                }

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        asset_name: str,
        properties: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update a Asset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_name: Asset name parameter. Required.
        :type asset_name: str
        :param properties: The resource properties to be updated. Required.
        :type properties: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """

    @distributed_trace
    def begin_update(
        self, resource_group_name: str, asset_name: str, properties: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> LROPoller[JSON]:
        """Update a Asset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_name: Asset name parameter. Required.
        :type asset_name: str
        :param properties: The resource properties to be updated. Is either a JSON type or a IO[bytes]
         type. Required.
        :type properties: JSON or IO[bytes]
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                properties = {
                    "properties": {
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str"
                    },
                    "tags": {
                        "str": "str"
                    }
                }

                # response body for status code(s): 200
                response == {
                    "extendedLocation": {
                        "name": "str",
                        "type": "str"
                    },
                    "location": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "assetEndpointProfileRef": "str",
                        "attributes": {
                            "str": {}
                        },
                        "datasets": [
                            {
                                "name": "str",
                                "dataPoints": [
                                    {
                                        "dataSource": "str",
                                        "name": "str",
                                        "dataPointConfiguration": "str",
                                        "observabilityMode": "None"
                                    }
                                ],
                                "datasetConfiguration": "str",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "defaultDatasetsConfiguration": "str",
                        "defaultEventsConfiguration": "str",
                        "defaultTopic": {
                            "path": "str",
                            "retain": "str"
                        },
                        "description": "str",
                        "discoveredAssetRefs": [
                            "str"
                        ],
                        "displayName": "str",
                        "documentationUri": "str",
                        "enabled": bool,
                        "events": [
                            {
                                "eventNotifier": "str",
                                "name": "str",
                                "eventConfiguration": "str",
                                "observabilityMode": "None",
                                "topic": {
                                    "path": "str",
                                    "retain": "str"
                                }
                            }
                        ],
                        "externalAssetId": "str",
                        "hardwareRevision": "str",
                        "manufacturer": "str",
                        "manufacturerUri": "str",
                        "model": "str",
                        "productCode": "str",
                        "provisioningState": "str",
                        "serialNumber": "str",
                        "softwareRevision": "str",
                        "status": {
                            "datasets": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "errors": [
                                {
                                    "code": 0,
                                    "message": "str"
                                }
                            ],
                            "events": [
                                {
                                    "name": "str",
                                    "messageSchemaReference": {
                                        "schemaName": "str",
                                        "schemaRegistryNamespace": "str",
                                        "schemaVersion": "str"
                                    }
                                }
                            ],
                            "version": 0
                        },
                        "uuid": "str",
                        "version": 0
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "tags": {
                        "str": "str"
                    },
                    "type": "str"
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._update_initial(
                resource_group_name=resource_group_name,
                asset_name=asset_name,
                properties=properties,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "location"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[JSON].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[JSON](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _delete_initial(self, resource_group_name: str, asset_name: str, **kwargs: Any) -> Iterator[bytes]:
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        _request = build_assets_delete_request(
            resource_group_name=resource_group_name,
            asset_name=asset_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        response_headers = {}
        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), response_headers)  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore

    @distributed_trace
    def begin_delete(self, resource_group_name: str, asset_name: str, **kwargs: Any) -> LROPoller[None]:
        """Delete a Asset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param asset_name: Asset name parameter. Required.
        :type asset_name: str
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(
                resource_group_name=resource_group_name,
                asset_name=asset_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})  # type: ignore

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, ARMPolling(lro_delay, lro_options={"final-state-via": "location"}, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[None].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[None](self._client, raw_result, get_long_running_output, polling_method)  # type: ignore


class BillingContainersOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~deviceregistry.mgmt.MicrosoftDeviceRegistryManagementService`'s
        :attr:`billing_containers` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_by_subscription(self, **kwargs: Any) -> Iterable[JSON]:
        """List BillingContainer resources by subscription ID.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "provisioningState": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "type": "str"
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_billing_containers_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get(self, billing_container_name: str, **kwargs: Any) -> JSON:
        """Get a BillingContainer.

        :param billing_container_name: Name of the billing container. Required.
        :type billing_container_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "provisioningState": "str"
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str"
                    },
                    "type": "str"
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_billing_containers_get_request(
            billing_container_name=billing_container_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore


class OperationStatusOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~deviceregistry.mgmt.MicrosoftDeviceRegistryManagementService`'s
        :attr:`operation_status` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, location: str, operation_id: str, **kwargs: Any) -> JSON:
        """Returns the current status of an async operation.

        :param location: The name of the Azure region. Required.
        :type location: str
        :param operation_id: The ID of an ongoing async operation. Required.
        :type operation_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "status": "str",
                    "endTime": "2020-02-20 00:00:00",
                    "error": {
                        "additionalInfo": [
                            {
                                "info": {},
                                "type": "str"
                            }
                        ],
                        "code": "str",
                        "details": [
                            ...
                        ],
                        "message": "str",
                        "target": "str"
                    },
                    "id": "str",
                    "name": "str",
                    "operations": [
                        ...
                    ],
                    "percentComplete": 0.0,
                    "resourceId": "str",
                    "startTime": "2020-02-20 00:00:00"
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_operation_status_get_request(
            location=location,
            operation_id=operation_id,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore
